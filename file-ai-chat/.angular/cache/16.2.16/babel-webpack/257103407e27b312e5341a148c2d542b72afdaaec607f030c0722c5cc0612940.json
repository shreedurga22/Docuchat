{"ast":null,"code":"import { __decorate } from \"tslib\";\n// file-reader.component.ts\nimport { Component } from '@angular/core';\nexport let FileReaderComponent = class FileReaderComponent {\n  constructor(backend) {\n    this.backend = backend;\n    this.selectedFile = null;\n    this.uploadedText = '';\n    this.answer = '';\n    this.question = '';\n    this.showModal = false;\n  }\n  // Handle file selection\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.selectedFile = file;\n      this.uploadedText = '';\n      this.answer = '';\n      this.question = '';\n      this.showModal = false;\n      this.backend.uploadFile(file).subscribe({\n        next: res => {\n          console.log('Upload response:', res);\n          this.uploadedText = res.file_text || '';\n          this.showModal = true; // show modal with extracted text\n        },\n\n        error: err => {\n          console.error('Upload error:', err);\n          alert('Failed to upload file.');\n        }\n      });\n    }\n  }\n  // Ask a question\n  askQuestion() {\n    if (!this.question || !this.uploadedText) {\n      alert('Please enter a question and upload a file first.');\n      return;\n    }\n    this.backend.askQuestion(this.question, this.uploadedText).subscribe({\n      next: res => {\n        console.log('Answer response:', res);\n        this.answer = res.answer || 'No answer returned.';\n      },\n      error: err => {\n        console.error('Backend error:', err);\n        this.answer = 'Could not get answer from backend.';\n      }\n    });\n  }\n  // Close modal\n  onModalClose() {\n    this.showModal = false;\n  }\n};\nFileReaderComponent = __decorate([Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})], FileReaderComponent);","map":{"version":3,"names":["Component","FileReaderComponent","constructor","backend","selectedFile","uploadedText","answer","question","showModal","onFileSelected","event","file","target","files","uploadFile","subscribe","next","res","console","log","file_text","error","err","alert","askQuestion","onModalClose","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts"],"sourcesContent":["// file-reader.component.ts\nimport { Component } from '@angular/core';\nimport { BackendService } from './backend.service'; // assuming service is in the same folder\n\n@Component({\n  selector: 'app-file-reader',  // matches file name\n  templateUrl: './file-reader.component.html', // matches HTML file\n  styleUrls: ['./file-reader.component.css']\n})\nexport class FileReaderComponent {\n  selectedFile: File | null = null;\n  uploadedText: string = '';\n  answer: string = '';\n  question: string = '';\n  showModal: boolean = false;\n\n  constructor(private backend: BackendService) {}\n\n  // Handle file selection\n  onFileSelected(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      this.selectedFile = file;\n      this.uploadedText = '';\n      this.answer = '';\n      this.question = '';\n      this.showModal = false;\n\n      this.backend.uploadFile(file).subscribe({\n        next: (res) => {\n          console.log('Upload response:', res);\n          this.uploadedText = res.file_text || '';\n          this.showModal = true; // show modal with extracted text\n        },\n        error: (err) => {\n          console.error('Upload error:', err);\n          alert('Failed to upload file.');\n        }\n      });\n    }\n  }\n\n  // Ask a question\n  askQuestion() {\n    if (!this.question || !this.uploadedText) {\n      alert('Please enter a question and upload a file first.');\n      return;\n    }\n\n    this.backend.askQuestion(this.question, this.uploadedText).subscribe({\n      next: (res) => {\n        console.log('Answer response:', res);\n        this.answer = res.answer || 'No answer returned.';\n      },\n      error: (err) => {\n        console.error('Backend error:', err);\n        this.answer = 'Could not get answer from backend.';\n      }\n    });\n  }\n\n  // Close modal\n  onModalClose() {\n    this.showModal = false;\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YAAoBC,OAAuB;IAAvB,KAAAA,OAAO,GAAPA,OAAO;IAN3B,KAAAC,YAAY,GAAgB,IAAI;IAChC,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,SAAS,GAAY,KAAK;EAEoB;EAE9C;EACAC,cAAcA,CAACC,KAAU;IACvB,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACR,IAAI,CAACP,YAAY,GAAGO,IAAI;MACxB,IAAI,CAACN,YAAY,GAAG,EAAE;MACtB,IAAI,CAACC,MAAM,GAAG,EAAE;MAChB,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACC,SAAS,GAAG,KAAK;MAEtB,IAAI,CAACL,OAAO,CAACW,UAAU,CAACH,IAAI,CAAC,CAACI,SAAS,CAAC;QACtCC,IAAI,EAAGC,GAAG,IAAI;UACZC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;UACpC,IAAI,CAACZ,YAAY,GAAGY,GAAG,CAACG,SAAS,IAAI,EAAE;UACvC,IAAI,CAACZ,SAAS,GAAG,IAAI,CAAC,CAAC;QACzB,CAAC;;QACDa,KAAK,EAAGC,GAAG,IAAI;UACbJ,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEC,GAAG,CAAC;UACnCC,KAAK,CAAC,wBAAwB,CAAC;QACjC;OACD,CAAC;;EAEN;EAEA;EACAC,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACjB,QAAQ,IAAI,CAAC,IAAI,CAACF,YAAY,EAAE;MACxCkB,KAAK,CAAC,kDAAkD,CAAC;MACzD;;IAGF,IAAI,CAACpB,OAAO,CAACqB,WAAW,CAAC,IAAI,CAACjB,QAAQ,EAAE,IAAI,CAACF,YAAY,CAAC,CAACU,SAAS,CAAC;MACnEC,IAAI,EAAGC,GAAG,IAAI;QACZC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;QACpC,IAAI,CAACX,MAAM,GAAGW,GAAG,CAACX,MAAM,IAAI,qBAAqB;MACnD,CAAC;MACDe,KAAK,EAAGC,GAAG,IAAI;QACbJ,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEC,GAAG,CAAC;QACpC,IAAI,CAAChB,MAAM,GAAG,oCAAoC;MACpD;KACD,CAAC;EACJ;EAEA;EACAmB,YAAYA,CAAA;IACV,IAAI,CAACjB,SAAS,GAAG,KAAK;EACxB;CACD;AAxDYP,mBAAmB,GAAAyB,UAAA,EAL/B1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACW5B,mBAAmB,CAwD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}