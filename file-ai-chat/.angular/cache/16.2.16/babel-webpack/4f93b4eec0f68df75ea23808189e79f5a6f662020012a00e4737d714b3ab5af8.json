{"ast":null,"code":"import _asyncToGenerator from \"D:/L&T projects/file-ai-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createWorker } from 'tesseract.js';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction FileReaderComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.uploadMessage);\n  }\n}\nfunction FileReaderComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"span\", 12);\n    i0.ɵɵtext(2, \"Answer:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.response);\n  }\n}\nexport class FileReaderComponent {\n  constructor() {\n    this.extractedText = '';\n    this.question = '';\n    this.answer = '';\n    this.isLoading = false;\n    this.selectedImage = null;\n    this.errorMessage = null;\n    // Supported file types\n    this.supportedFormats = ['image/jpeg', 'image/png'];\n  }\n  onFileSelected(event) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.resetState();\n      const input = event.target;\n      const file = input.files?.[0];\n      if (!file) return;\n      if (!_this.supportedFormats.includes(file.type)) {\n        _this.errorMessage = 'Please upload a JPG or PNG image.';\n        return;\n      }\n      _this.isLoading = true;\n      try {\n        // Display preview\n        yield _this.displayImagePreview(file);\n        // Extract text\n        yield _this.extractTextFromImage(file);\n      } catch (error) {\n        _this.handleError(error, 'Error processing image');\n      } finally {\n        _this.isLoading = false;\n      }\n    })();\n  }\n  resetState() {\n    this.errorMessage = null;\n    this.answer = '';\n  }\n  displayImagePreview(file) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          _this2.selectedImage = e.target?.result;\n          resolve();\n        };\n        reader.readAsDataURL(file);\n      });\n    })();\n  }\n  extractTextFromImage(file) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const worker = yield createWorker({\n          logger: m => console.log(m) // Optional: Add progress logging\n        });\n\n        yield worker.loadLanguage('eng');\n        yield worker.initialize('eng');\n        const {\n          data: {\n            text\n          }\n        } = yield worker.recognize(file);\n        _this3.extractedText = text.trim();\n        yield worker.terminate();\n      } catch (error) {\n        throw new Error('Text extraction failed');\n      }\n    })();\n  }\n  askQuestion() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.extractedText) {\n        _this4.errorMessage = 'Please upload an image with text first.';\n        return;\n      }\n      if (!_this4.question.trim()) {\n        _this4.errorMessage = 'Please enter a valid question.';\n        return;\n      }\n      _this4.isLoading = true;\n      _this4.errorMessage = null;\n      try {\n        const response = yield axios.post('https://api.openai.com/v1/chat/completions', {\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'system',\n            content: 'Answer questions concisely about the following text. If you cannot answer, say so.'\n          }, {\n            role: 'user',\n            content: `Text: ${_this4.extractedText}\\nQuestion: ${_this4.question}`\n          }],\n          temperature: 0.3 // For more focused answers\n        }, {\n          headers: {\n            'Authorization': `Bearer ${environment.openaiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        _this4.answer = response.data.choices[0].message.content;\n      } catch (error) {\n        _this4.handleError(error, 'Failed to get AI response');\n      } finally {\n        _this4.isLoading = false;\n      }\n    })();\n  }\n  handleError(error, defaultMsg) {\n    console.error(error);\n    this.errorMessage = error.response?.data?.error?.message || defaultMsg;\n  }\n  static {\n    this.ɵfac = function FileReaderComponent_Factory(t) {\n      return new (t || FileReaderComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FileReaderComponent,\n      selectors: [[\"app-file-reader\"]],\n      decls: 19,\n      vars: 5,\n      consts: [[1, \"main-title\"], [1, \"file-reader-card\"], [1, \"card-title\"], [1, \"centered-row\"], [\"type\", \"file\", 3, \"change\"], [1, \"blue-btn\", 3, \"disabled\", \"click\"], [\"class\", \"upload-message\", 4, \"ngIf\"], [1, \"question-title\"], [\"type\", \"text\", 1, \"question-input\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"answer-box\", 4, \"ngIf\"], [1, \"upload-message\"], [1, \"answer-box\"], [1, \"answer-label\"]],\n      template: function FileReaderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\", 0);\n          i0.ɵɵtext(1, \"AI File Reader\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"h2\", 2);\n          i0.ɵɵtext(4, \"Upload a PDF or Image\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 3)(6, \"input\", 4);\n          i0.ɵɵlistener(\"change\", function FileReaderComponent_Template_input_change_6_listener($event) {\n            return ctx.onFileSelected($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 3)(8, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function FileReaderComponent_Template_button_click_8_listener() {\n            return ctx.onUpload();\n          });\n          i0.ɵɵtext(9, \"Upload\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(10, FileReaderComponent_div_10_Template, 2, 1, \"div\", 6);\n          i0.ɵɵelementStart(11, \"h3\", 7);\n          i0.ɵɵtext(12, \"Ask a question about the file:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 3)(14, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function FileReaderComponent_Template_input_ngModelChange_14_listener($event) {\n            return ctx.question = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 3)(16, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function FileReaderComponent_Template_button_click_16_listener() {\n            return ctx.onAsk();\n          });\n          i0.ɵɵtext(17, \"Ask\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(18, FileReaderComponent_div_18_Template, 5, 1, \"div\", 9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedFile);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.uploadMessage);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.question);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.question);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.response);\n        }\n      },\n      dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n      styles: [\".main-title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-family: 'Times New Roman', serif;\\n  font-weight: bold;\\n  margin: 45px 0 28px 0;\\n  font-size: 2.3rem;\\n}\\n\\n.file-reader-card[_ngcontent-%COMP%] {\\n  background: #f8f8f8;\\n  margin: 0 auto 40px auto;\\n  width: 60%;\\n  border-radius: 20px;\\n  box-shadow: 0 0 10px #d8d8d8;\\n  padding: 40px 0 36px 0;\\n}\\n\\n.card-title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-family: 'Times New Roman', serif;\\n  font-weight: bold;\\n  font-size: 1.45rem;\\n  margin-bottom: 18px;\\n}\\n\\n.centered-row[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-bottom: 15px;\\n}\\n\\n.blue-btn[_ngcontent-%COMP%] {\\n  background: #028cfc;\\n  border: none;\\n  color: white;\\n  padding: 11px 32px;\\n  border-radius: 7px;\\n  font-size: 18px;\\n  cursor: pointer;\\n  margin-top: 10px;\\n  margin-bottom: 12px;\\n  transition: background 0.2s;\\n}\\n\\n.blue-btn[_ngcontent-%COMP%]:disabled {\\n  background: #b2d8fc;\\n  cursor: not-allowed;\\n}\\n\\n.question-title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-family: 'Times New Roman', serif;\\n  font-weight: bold;\\n  font-size: 1.12rem;\\n  margin-bottom: 13px;\\n  margin-top: 10px;\\n}\\n\\n.question-input[_ngcontent-%COMP%] {\\n  width: 70%;\\n  padding: 8px 9px;\\n  font-size: 16px;\\n  border: 1.3px solid #222;\\n  border-radius: 4px;\\n}\\n\\n.upload-message[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-bottom: 21px;\\n  color: #188300;\\n  font-weight: 500;\\n  font-size: 1.09rem;\\n}\\n\\n.answer-box[_ngcontent-%COMP%] {\\n  margin: 30px auto 0 auto;\\n  background: #eaffea;\\n  border-left: 6px solid #27a327;\\n  border-radius: 8px;\\n  width: 94%;\\n  padding: 13px 17px;\\n  font-size: 1.11rem;\\n}\\n\\n.answer-label[_ngcontent-%COMP%] {\\n  font-family: 'Times New Roman', serif;\\n  font-weight: bold;\\n}\\n\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmlsZS1yZWFkZXIvZmlsZS1yZWFkZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixxQ0FBcUM7RUFDckMsaUJBQWlCO0VBQ2pCLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsd0JBQXdCO0VBQ3hCLFVBQVU7RUFDVixtQkFBbUI7RUFDbkIsNEJBQTRCO0VBQzVCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixxQ0FBcUM7RUFDckMsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixxQ0FBcUM7RUFDckMsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2Ysd0JBQXdCO0VBQ3hCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQ0FBcUM7RUFDckMsaUJBQWlCO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4tdGl0bGUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIHNlcmlmO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIG1hcmdpbjogNDVweCAwIDI4cHggMDtcclxuICBmb250LXNpemU6IDIuM3JlbTtcclxufVxyXG5cclxuLmZpbGUtcmVhZGVyLWNhcmQge1xyXG4gIGJhY2tncm91bmQ6ICNmOGY4Zjg7XHJcbiAgbWFyZ2luOiAwIGF1dG8gNDBweCBhdXRvO1xyXG4gIHdpZHRoOiA2MCU7XHJcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICBib3gtc2hhZG93OiAwIDAgMTBweCAjZDhkOGQ4O1xyXG4gIHBhZGRpbmc6IDQwcHggMCAzNnB4IDA7XHJcbn1cclxuXHJcbi5jYXJkLXRpdGxlIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZjtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDEuNDVyZW07XHJcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcclxufVxyXG5cclxuLmNlbnRlcmVkLXJvdyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbn1cclxuXHJcbi5ibHVlLWJ0biB7XHJcbiAgYmFja2dyb3VuZDogIzAyOGNmYztcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIHBhZGRpbmc6IDExcHggMzJweDtcclxuICBib3JkZXItcmFkaXVzOiA3cHg7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XHJcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzO1xyXG59XHJcblxyXG4uYmx1ZS1idG46ZGlzYWJsZWQge1xyXG4gIGJhY2tncm91bmQ6ICNiMmQ4ZmM7XHJcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcclxufVxyXG5cclxuLnF1ZXN0aW9uLXRpdGxlIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZjtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDEuMTJyZW07XHJcbiAgbWFyZ2luLWJvdHRvbTogMTNweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcblxyXG4ucXVlc3Rpb24taW5wdXQge1xyXG4gIHdpZHRoOiA3MCU7XHJcbiAgcGFkZGluZzogOHB4IDlweDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgYm9yZGVyOiAxLjNweCBzb2xpZCAjMjIyO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxufVxyXG5cclxuLnVwbG9hZC1tZXNzYWdlIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjFweDtcclxuICBjb2xvcjogIzE4ODMwMDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGZvbnQtc2l6ZTogMS4wOXJlbTtcclxufVxyXG5cclxuLmFuc3dlci1ib3gge1xyXG4gIG1hcmdpbjogMzBweCBhdXRvIDAgYXV0bztcclxuICBiYWNrZ3JvdW5kOiAjZWFmZmVhO1xyXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzI3YTMyNztcclxuICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgd2lkdGg6IDk0JTtcclxuICBwYWRkaW5nOiAxM3B4IDE3cHg7XHJcbiAgZm9udC1zaXplOiAxLjExcmVtO1xyXG59XHJcblxyXG4uYW5zd2VyLWxhYmVsIHtcclxuICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIHNlcmlmO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["createWorker","axios","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","uploadMessage","ctx_r1","response","FileReaderComponent","constructor","extractedText","question","answer","isLoading","selectedImage","errorMessage","supportedFormats","onFileSelected","event","_this","_asyncToGenerator","resetState","input","target","file","files","includes","type","displayImagePreview","extractTextFromImage","error","handleError","_this2","Promise","resolve","reader","FileReader","onload","e","result","readAsDataURL","_this3","worker","logger","m","console","log","loadLanguage","initialize","data","text","recognize","trim","terminate","Error","askQuestion","_this4","post","model","messages","role","content","temperature","headers","environment","openaiKey","choices","message","defaultMsg","selectors","decls","vars","consts","template","FileReaderComponent_Template","rf","ctx","ɵɵlistener","FileReaderComponent_Template_input_change_6_listener","$event","FileReaderComponent_Template_button_click_8_listener","onUpload","ɵɵtemplate","FileReaderComponent_div_10_Template","FileReaderComponent_Template_input_ngModelChange_14_listener","FileReaderComponent_Template_button_click_16_listener","onAsk","FileReaderComponent_div_18_Template","ɵɵproperty","selectedFile"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts","D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { createWorker } from 'tesseract.js';\nimport axios from 'axios';\n\n@Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})\nexport class FileReaderComponent {\n  extractedText: string = '';\n  question: string = '';\n  answer: string = '';\n  isLoading: boolean = false;\n  selectedImage: string | ArrayBuffer | null = null;\n  errorMessage: string | null = null;\n\n  // Supported file types\n  readonly supportedFormats = ['image/jpeg', 'image/png'];\n\n  async onFileSelected(event: Event) {\n    this.resetState();\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n    \n    if (!file) return;\n    \n    if (!this.supportedFormats.includes(file.type)) {\n      this.errorMessage = 'Please upload a JPG or PNG image.';\n      return;\n    }\n\n    this.isLoading = true;\n    \n    try {\n      // Display preview\n      await this.displayImagePreview(file);\n      \n      // Extract text\n      await this.extractTextFromImage(file);\n    } catch (error) {\n      this.handleError(error, 'Error processing image');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private resetState() {\n    this.errorMessage = null;\n    this.answer = '';\n  }\n\n  private async displayImagePreview(file: File): Promise<void> {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.selectedImage = e.target?.result as string;\n        resolve();\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  private async extractTextFromImage(file: File): Promise<void> {\n    try {\n      const worker = await createWorker({\n        logger: (m) => console.log(m), // Optional: Add progress logging\n      });\n      \n      await worker.loadLanguage('eng');\n      await worker.initialize('eng');\n      \n      const { data: { text } } = await worker.recognize(file);\n      this.extractedText = text.trim();\n      \n      await worker.terminate();\n    } catch (error) {\n      throw new Error('Text extraction failed');\n    }\n  }\n\n  async askQuestion() {\n    if (!this.extractedText) {\n      this.errorMessage = 'Please upload an image with text first.';\n      return;\n    }\n    \n    if (!this.question.trim()) {\n      this.errorMessage = 'Please enter a valid question.';\n      return;\n    }\n\n    this.isLoading = true;\n    this.errorMessage = null;\n    \n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [\n            { \n              role: 'system', \n              content: 'Answer questions concisely about the following text. If you cannot answer, say so.' \n            },\n            { \n              role: 'user', \n              content: `Text: ${this.extractedText}\\nQuestion: ${this.question}` \n            }\n          ],\n          temperature: 0.3 // For more focused answers\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${environment.openaiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      this.answer = response.data.choices[0].message.content;\n    } catch (error) {\n      this.handleError(error, 'Failed to get AI response');\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private handleError(error: any, defaultMsg: string) {\n    console.error(error);\n    this.errorMessage = error.response?.data?.error?.message || defaultMsg;\n  }\n}\n","<h1 class=\"main-title\">AI File Reader</h1>\n<div class=\"file-reader-card\">\n  <h2 class=\"card-title\">Upload a PDF or Image</h2>\n  <div class=\"centered-row\">\n    <input type=\"file\" (change)=\"onFileSelected($event)\" />\n  </div>\n  <div class=\"centered-row\">\n    <button (click)=\"onUpload()\" [disabled]=\"!selectedFile\" class=\"blue-btn\">Upload</button>\n  </div>\n  <div *ngIf=\"uploadMessage\" class=\"upload-message\">{{ uploadMessage }}</div>\n  <h3 class=\"question-title\">Ask a question about the file:</h3>\n  <div class=\"centered-row\">\n    <input type=\"text\" class=\"question-input\" [(ngModel)]=\"question\" />\n  </div>\n  <div class=\"centered-row\">\n    <button (click)=\"onAsk()\" [disabled]=\"!question\" class=\"blue-btn\">Ask</button>\n  </div>\n  <div *ngIf=\"response\" class=\"answer-box\">\n    <span class=\"answer-label\">Answer:</span>\n    <p>{{ response }}</p>\n  </div>\n</div>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}