{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let FileReaderComponent = class FileReaderComponent {\n  constructor(fileService) {\n    this.fileService = fileService;\n    this.selectedFile = null;\n    this.question = '';\n    this.response = '';\n    this.showModal = false;\n    this.fileUploaded = false; // ✅ add this line\n  }\n\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n  }\n  onUpload() {\n    if (!this.selectedFile) return;\n    this.fileService.uploadFile(this.selectedFile).subscribe(() => {\n      this.showModal = true;\n      this.fileUploaded = true; // ✅ enable asking only after upload\n    });\n  }\n\n  onModalOk() {\n    this.showModal = false;\n  }\n  onAsk() {\n    if (!this.question) return;\n    this.fileService.askQuestion(this.question).subscribe(res => {\n      this.response = res.answer; // ✅ answer appears only after asking\n    });\n  }\n};\n\nFileReaderComponent = __decorate([Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})], FileReaderComponent);","map":{"version":3,"names":["Component","FileReaderComponent","constructor","fileService","selectedFile","question","response","showModal","fileUploaded","onFileSelected","event","target","files","onUpload","uploadFile","subscribe","onModalOk","onAsk","askQuestion","res","answer","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FileService } from '../file.service';\n\n@Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})\nexport class FileReaderComponent {\n  selectedFile: File | null = null;\n  question: string = '';\n  response: string = '';\n  showModal: boolean = false;\n  fileUploaded: boolean = false;   // ✅ add this line\n\n  constructor(private fileService: FileService) {}\n\n  onFileSelected(event: any) {\n    this.selectedFile = event.target.files[0];\n  }\n\n  onUpload() {\n    if (!this.selectedFile) return;\n    this.fileService.uploadFile(this.selectedFile).subscribe(() => {\n      this.showModal = true;\n      this.fileUploaded = true;   // ✅ enable asking only after upload\n    });\n  }\n\n  onModalOk() {\n    this.showModal = false;\n  }\n\n  onAsk() {\n    if (!this.question) return;\n    this.fileService.askQuestion(this.question).subscribe((res: any) => {\n      this.response = res.answer;  // ✅ answer appears only after asking\n    });\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAN/B,KAAAC,YAAY,GAAgB,IAAI;IAChC,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,YAAY,GAAY,KAAK,CAAC,CAAG;EAEc;;EAE/CC,cAAcA,CAACC,KAAU;IACvB,IAAI,CAACN,YAAY,GAAGM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3C;EAEAC,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACT,YAAY,EAAE;IACxB,IAAI,CAACD,WAAW,CAACW,UAAU,CAAC,IAAI,CAACV,YAAY,CAAC,CAACW,SAAS,CAAC,MAAK;MAC5D,IAAI,CAACR,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,YAAY,GAAG,IAAI,CAAC,CAAG;IAC9B,CAAC,CAAC;EACJ;;EAEAQ,SAASA,CAAA;IACP,IAAI,CAACT,SAAS,GAAG,KAAK;EACxB;EAEAU,KAAKA,CAAA;IACH,IAAI,CAAC,IAAI,CAACZ,QAAQ,EAAE;IACpB,IAAI,CAACF,WAAW,CAACe,WAAW,CAAC,IAAI,CAACb,QAAQ,CAAC,CAACU,SAAS,CAAEI,GAAQ,IAAI;MACjE,IAAI,CAACb,QAAQ,GAAGa,GAAG,CAACC,MAAM,CAAC,CAAE;IAC/B,CAAC,CAAC;EACJ;CACD;;AA/BYnB,mBAAmB,GAAAoB,UAAA,EAL/BrB,SAAS,CAAC;EACTsB,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWvB,mBAAmB,CA+B/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}