{"ast":null,"code":"/**\n * marked v15.0.12 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/rules.ts\nvar noopTest = {\n  exec: () => null\n};\nfunction edit(regex, opt = \"\") {\n  let source = typeof regex === \"string\" ? regex : regex.source;\n  const obj = {\n    replace: (name, val) => {\n      let valSource = typeof val === \"string\" ? val : val.source;\n      valSource = valSource.replace(other.caret, \"$1\");\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: bull => new RegExp(`^( {0,3}${bull})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, \"i\")\n};\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", _blockLabel).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\", \"i\").replace(\"comment\", _comment).replace(\"tag\", _tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", paragraph).getRegex();\nvar blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText\n};\nvar gfmTable = edit(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\").replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockGfm = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", gfmTable).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex()\n};\nvar blockPedantic = {\n  ...blockNormal,\n  html: edit(`^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`).replace(\"comment\", _comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", lheading).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n};\nvar escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\nvar _punctuation = /[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nvar punctuation = edit(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, _punctuationOrSpace).getRegex();\nvar _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\";\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimUnd = edit(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\", \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, \"gu\").replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\nvar tag = edit(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\").replace(\"comment\", _inlineComment).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", _inlineLabel).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", _inlineLabel).replace(\"ref\", _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", _blockLabel).getRegex();\nvar reflinkSearch = edit(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", reflink).replace(\"nolink\", nolink).getRegex();\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest\n};\nvar inlinePedantic = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", _inlineLabel).getRegex()\n};\nvar inlineGfm = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\nvar inlineBreaks = {\n  ...inlineGfm,\n  br: edit(br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inlineGfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n};\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n// src/helpers.ts\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape2(html2, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html2)) {\n      return html2.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html2)) {\n      return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html2;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, \"%\");\n  } catch {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n      if (escaped) {\n        return \"|\";\n      } else {\n        return \" |\";\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push(\"\");\n    }\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(other.slashPipe, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n  return -1;\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link2, raw, lexer2, rules) {\n  const href = link2.href;\n  const title = link2.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, \"$1\");\n  lexer2.state.inLink = true;\n  const token = {\n    type: cap[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer2.inlineTokens(text)\n  };\n  lexer2.state.inLink = false;\n  return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map(node => {\n    const matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class {\n  options;\n  rules;\n  // set by the lexer\n  lexer;\n  // set by the lexer\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: rtrim(cap[0], \"\\n\")\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], \"\\n\").split(\"\\n\");\n      let raw = \"\";\n      let text = \"\";\n      const tokens = [];\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n        const currentRaw = currentLines.join(\"\\n\");\n        const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, \"\\n    $1\").replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        raw = raw ? `${raw}\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\n${currentText}` : currentText;\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n        if (lines.length === 0) {\n          break;\n        }\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"code\") {\n          break;\n        } else if (lastToken?.type === \"blockquote\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.blockquote(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === \"list\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.list(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1).raw.length).split(\"\\n\");\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw,\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list2 = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      while (src) {\n        let endEarly = false;\n        let raw = \"\";\n        let itemContents = \"\";\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split(\"\\n\", 1)[0].replace(this.rules.other.listReplaceTabs, t => \" \".repeat(3 * t.length));\n        let nextLine = src.split(\"\\n\", 1)[0];\n        let blankLine = !line.trim();\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n          while (src) {\n            const rawLine = src.split(\"\\n\", 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, \"  \");\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, \"    \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLineWithoutTabs.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n        if (!list2.loose) {\n          if (endsWithBlankLine) {\n            list2.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        let istask = null;\n        let ischecked;\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, \"\");\n          }\n        }\n        list2.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list2.raw += raw;\n      }\n      const lastItem = list2.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        return;\n      }\n      list2.raw = list2.raw.trimEnd();\n      for (let i = 0; i < list2.items.length; i++) {\n        this.lexer.state.top = false;\n        list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);\n        if (!list2.loose) {\n          const spacers = list2.items[i].tokens.filter(t => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n          list2.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list2.loose) {\n        for (let i = 0; i < list2.items.length; i++) {\n          list2.items[i].loose = true;\n        }\n      }\n      return list2;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\",\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag: tag2,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      return;\n    }\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\");\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, \"\").split(\"\\n\") : [];\n    const item = {\n      type: \"table\",\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: []\n    };\n    if (headers.length !== aligns.length) {\n      return;\n    }\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push(\"right\");\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push(\"center\");\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push(\"left\");\n      } else {\n        item.align.push(null);\n      }\n    }\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i]\n      });\n    }\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i]\n        };\n      }));\n    }\n    return item;\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: cap[1]\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex === -2) {\n          return;\n        }\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link2 = this.rules.other.pedanticHrefTitle.exec(href);\n        if (link2) {\n          href = link2[1];\n          title = link2[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, \"$1\") : title\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const link2 = links[linkString.toLowerCase()];\n      if (!link2) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link2, cap[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = \"\") {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = [...match[0]].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue;\n        rLength = [...rDelim].length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, \" \");\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[1];\n        href = \"mailto:\" + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[0];\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? \"\";\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        escaped\n      };\n    }\n  }\n};\n\n// src/Lexer.ts\nvar _Lexer = class __Lexer {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n  constructor(options2) {\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(other.carriageReturn, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n    return this.tokens;\n  }\n  blockTokens(src, tokens = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, \"    \").replace(other.spaceLine, \"\");\n    }\n    while (src) {\n      let token;\n      if (this.options.extensions?.block?.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== void 0) {\n          lastToken.raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let maskedSrc = src;\n    let match = null;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    let keepPrevChar = false;\n    let prevChar = \"\";\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      let token;\n      if (this.options.extensions?.inline?.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === \"text\" && lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class {\n  options;\n  parser;\n  // set by the parser\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(token) {\n    return \"\";\n  }\n  code({\n    text,\n    lang,\n    escaped\n  }) {\n    const langString = (lang || \"\").match(other.notSpaceStart)?.[0];\n    const code = text.replace(other.endingNewline, \"\") + \"\\n\";\n    if (!langString) {\n      return \"<pre><code>\" + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"language-' + escape2(langString) + '\">' + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote({\n    tokens\n  }) {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\n${body}</blockquote>\n`;\n  }\n  html({\n    text\n  }) {\n    return text;\n  }\n  heading({\n    tokens,\n    depth\n  }) {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\n`;\n  }\n  hr(token) {\n    return \"<hr>\\n\";\n  }\n  list(token) {\n    const ordered = token.ordered;\n    const start = token.start;\n    let body = \"\";\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n    const type = ordered ? \"ol\" : \"ul\";\n    const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startAttr + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(item) {\n    let itemBody = \"\";\n    if (item.task) {\n      const checkbox = this.checkbox({\n        checked: !!item.checked\n      });\n      if (item.loose) {\n        if (item.tokens[0]?.type === \"paragraph\") {\n          item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n            item.tokens[0].tokens[0].text = checkbox + \" \" + escape2(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: \"text\",\n            raw: checkbox + \" \",\n            text: checkbox + \" \",\n            escaped: true\n          });\n        }\n      } else {\n        itemBody += checkbox + \" \";\n      }\n    }\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n    return `<li>${itemBody}</li>\n`;\n  }\n  checkbox({\n    checked\n  }) {\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph({\n    tokens\n  }) {\n    return `<p>${this.parser.parseInline(tokens)}</p>\n`;\n  }\n  table(token) {\n    let header = \"\";\n    let cell = \"\";\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({\n      text: cell\n    });\n    let body = \"\";\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n      cell = \"\";\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n      body += this.tablerow({\n        text: cell\n      });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow({\n    text\n  }) {\n    return `<tr>\n${text}</tr>\n`;\n  }\n  tablecell(token) {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? \"th\" : \"td\";\n    const tag2 = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n    return tag2 + content + `</${type}>\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong({\n    tokens\n  }) {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n  em({\n    tokens\n  }) {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n  codespan({\n    text\n  }) {\n    return `<code>${escape2(text, true)}</code>`;\n  }\n  br(token) {\n    return \"<br>\";\n  }\n  del({\n    tokens\n  }) {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n  link({\n    href,\n    title,\n    tokens\n  }) {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + escape2(title) + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image({\n    href,\n    title,\n    text,\n    tokens\n  }) {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape2(text);\n    }\n    href = cleanHref;\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape2(title)}\"`;\n    }\n    out += \">\";\n    return out;\n  }\n  text(token) {\n    return \"tokens\" in token && token.tokens ? this.parser.parseInline(token.tokens) : \"escaped\" in token && token.escaped ? token.text : escape2(token.text);\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong({\n    text\n  }) {\n    return text;\n  }\n  em({\n    text\n  }) {\n    return text;\n  }\n  codespan({\n    text\n  }) {\n    return text;\n  }\n  del({\n    text\n  }) {\n    return text;\n  }\n  html({\n    text\n  }) {\n    return text;\n  }\n  text({\n    text\n  }) {\n    return text;\n  }\n  link({\n    text\n  }) {\n    return \"\" + text;\n  }\n  image({\n    text\n  }) {\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class __Parser {\n  options;\n  renderer;\n  textRenderer;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken;\n        const ret = this.options.extensions.renderers[genericToken.type].call({\n          parser: this\n        }, genericToken);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(genericToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"space\":\n          {\n            out += this.renderer.space(token);\n            continue;\n          }\n        case \"hr\":\n          {\n            out += this.renderer.hr(token);\n            continue;\n          }\n        case \"heading\":\n          {\n            out += this.renderer.heading(token);\n            continue;\n          }\n        case \"code\":\n          {\n            out += this.renderer.code(token);\n            continue;\n          }\n        case \"table\":\n          {\n            out += this.renderer.table(token);\n            continue;\n          }\n        case \"blockquote\":\n          {\n            out += this.renderer.blockquote(token);\n            continue;\n          }\n        case \"list\":\n          {\n            out += this.renderer.list(token);\n            continue;\n          }\n        case \"html\":\n          {\n            out += this.renderer.html(token);\n            continue;\n          }\n        case \"paragraph\":\n          {\n            out += this.renderer.paragraph(token);\n            continue;\n          }\n        case \"text\":\n          {\n            let textToken = token;\n            let body = this.renderer.text(textToken);\n            while (i + 1 < tokens.length && tokens[i + 1].type === \"text\") {\n              textToken = tokens[++i];\n              body += \"\\n\" + this.renderer.text(textToken);\n            }\n            if (top) {\n              out += this.renderer.paragraph({\n                type: \"paragraph\",\n                raw: body,\n                text: body,\n                tokens: [{\n                  type: \"text\",\n                  raw: body,\n                  text: body,\n                  escaped: true\n                }]\n              });\n            } else {\n              out += body;\n            }\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer = this.renderer) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({\n          parser: this\n        }, anyToken);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(anyToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"escape\":\n          {\n            out += renderer.text(token);\n            break;\n          }\n        case \"html\":\n          {\n            out += renderer.html(token);\n            break;\n          }\n        case \"link\":\n          {\n            out += renderer.link(token);\n            break;\n          }\n        case \"image\":\n          {\n            out += renderer.image(token);\n            break;\n          }\n        case \"strong\":\n          {\n            out += renderer.strong(token);\n            break;\n          }\n        case \"em\":\n          {\n            out += renderer.em(token);\n            break;\n          }\n        case \"codespan\":\n          {\n            out += renderer.codespan(token);\n            break;\n          }\n        case \"br\":\n          {\n            out += renderer.br(token);\n            break;\n          }\n        case \"del\":\n          {\n            out += renderer.del(token);\n            break;\n          }\n        case \"text\":\n          {\n            out += renderer.text(token);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = class {\n  options;\n  block;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  static passThroughHooks = /* @__PURE__ */new Set([\"preprocess\", \"postprocess\", \"processAllTokens\"]);\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html2) {\n    return html2;\n  }\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens) {\n    return tokens;\n  }\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n};\n\n// src/Instance.ts\nvar Marked = class {\n  defaults = _getDefaults();\n  options = this.setOptions;\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n  constructor(...args) {\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\":\n          {\n            const tableToken = token;\n            for (const cell of tableToken.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n            for (const row of tableToken.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n            break;\n          }\n        case \"list\":\n          {\n            const listToken = token;\n            values = values.concat(this.walkTokens(listToken.items, callback));\n            break;\n          }\n        default:\n          {\n            const genericToken = token;\n            if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n              this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                const tokens2 = genericToken[childTokens].flat(Infinity);\n                values = values.concat(this.walkTokens(tokens2, callback));\n              });\n            } else if (genericToken.tokens) {\n              values = values.concat(this.walkTokens(genericToken.tokens, callback));\n            }\n          }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    args.forEach(pack => {\n      const opts = {\n        ...pack\n      };\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function (...args2) {\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"parser\"].includes(prop)) {\n            continue;\n          }\n          const rendererProp = prop;\n          const rendererFunc = pack.renderer[rendererProp];\n          const prevRenderer = renderer[rendererProp];\n          renderer[rendererProp] = (...args2) => {\n            let ret = rendererFunc.apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret || \"\";\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"rules\", \"lexer\"].includes(prop)) {\n            continue;\n          }\n          const tokenizerProp = prop;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp];\n          const prevTokenizer = tokenizer[tokenizerProp];\n          tokenizer[tokenizerProp] = (...args2) => {\n            let ret = tokenizerFunc.apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if ([\"options\", \"block\"].includes(prop)) {\n            continue;\n          }\n          const hooksProp = prop;\n          const hooksFunc = pack.hooks[hooksProp];\n          const prevHook = hooks[hooksProp];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[hooksProp] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret2 => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[hooksProp] = (...args2) => {\n              let ret = hooksFunc.apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = {\n        ...this.defaults,\n        ...opts\n      };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = {\n      ...this.defaults,\n      ...opt\n    };\n    return this;\n  }\n  lexer(src, options2) {\n    return _Lexer.lex(src, options2 ?? this.defaults);\n  }\n  parser(tokens, options2) {\n    return _Parser.parse(tokens, options2 ?? this.defaults);\n  }\n  parseMarkdown(blockType) {\n    const parse2 = (src, options2) => {\n      const origOpt = {\n        ...options2\n      };\n      const opt = {\n        ...this.defaults,\n        ...origOpt\n      };\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      }\n      if (typeof src === \"undefined\" || src === null) {\n        return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n      }\n      if (typeof src !== \"string\") {\n        return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n      }\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n      const lexer2 = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n      const parser2 = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src2 => lexer2(src2, opt)).then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser2(tokens, opt)).then(html2 => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);\n      }\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        let tokens = lexer2(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html2 = parser2(tokens, opt);\n        if (opt.hooks) {\n          html2 = opt.hooks.postprocess(html2);\n        }\n        return html2;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n    return parse2;\n  }\n  onError(silent, async) {\n    return e => {\n      e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n      if (silent) {\n        const msg = \"<p>An error occurred:</p><pre>\" + escape2(e.message + \"\", true) + \"</pre>\";\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\nmarked.options = marked.setOptions = function (options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function (...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","escape2","html2","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link2","raw","lexer2","rules","title","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","lexer","constructor","options2","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","list2","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","istask","ischecked","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","tag2","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","__Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","textRenderer","_TextRenderer","_Parser","__Parser","parser2","anyToken","renderers","genericToken","ret","textToken","_Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","tokens2","flat","pack","opts","ext","prevRenderer","args2","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","has","arg","Promise","resolve","then","ret2","walkTokens2","packWalktokens","blockType","parse2","origOpt","throwError","onError","prototype","toString","src2","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["D:/L&T projects/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v15.0.12 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/rules.ts\nvar noopTest = { exec: () => null };\nfunction edit(regex, opt = \"\") {\n  let source = typeof regex === \"string\" ? regex : regex.source;\n  const obj = {\n    replace: (name, val) => {\n      let valSource = typeof val === \"string\" ? val : val.source;\n      valSource = valSource.replace(other.caret, \"$1\");\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, \"i\")\n};\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", _blockLabel).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit(\n  \"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\",\n  \"i\"\n).replace(\"comment\", _comment).replace(\"tag\", _tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", paragraph).getRegex();\nvar blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText\n};\nvar gfmTable = edit(\n  \"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"\n).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockGfm = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", gfmTable).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex()\n};\nvar blockPedantic = {\n  ...blockNormal,\n  html: edit(\n    `^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`\n  ).replace(\"comment\", _comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", lheading).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n};\nvar escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\nvar _punctuation = /[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nvar punctuation = edit(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, _punctuationOrSpace).getRegex();\nvar _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\";\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimUnd = edit(\n  \"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\",\n  \"gu\"\n).replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, \"gu\").replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\nvar tag = edit(\n  \"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\"\n).replace(\"comment\", _inlineComment).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", _inlineLabel).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", _inlineLabel).replace(\"ref\", _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", _blockLabel).getRegex();\nvar reflinkSearch = edit(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", reflink).replace(\"nolink\", nolink).getRegex();\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest\n};\nvar inlinePedantic = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", _inlineLabel).getRegex()\n};\nvar inlineGfm = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\nvar inlineBreaks = {\n  ...inlineGfm,\n  br: edit(br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inlineGfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n};\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n// src/helpers.ts\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape2(html2, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html2)) {\n      return html2.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html2)) {\n      return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html2;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, \"%\");\n  } catch {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n    let escaped = false;\n    let curr = offset;\n    while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n    if (escaped) {\n      return \"|\";\n    } else {\n      return \" |\";\n    }\n  }), cells = row.split(other.splitPipe);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push(\"\");\n    }\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(other.slashPipe, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n  return -1;\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link2, raw, lexer2, rules) {\n  const href = link2.href;\n  const title = link2.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, \"$1\");\n  lexer2.state.inLink = true;\n  const token = {\n    type: cap[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer2.inlineTokens(text)\n  };\n  lexer2.state.inLink = false;\n  return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map((node) => {\n    const matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class {\n  options;\n  rules;\n  // set by the lexer\n  lexer;\n  // set by the lexer\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: rtrim(cap[0], \"\\n\")\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], \"\\n\").split(\"\\n\");\n      let raw = \"\";\n      let text = \"\";\n      const tokens = [];\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n        const currentRaw = currentLines.join(\"\\n\");\n        const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, \"\\n    $1\").replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        raw = raw ? `${raw}\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\n${currentText}` : currentText;\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n        if (lines.length === 0) {\n          break;\n        }\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"code\") {\n          break;\n        } else if (lastToken?.type === \"blockquote\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.blockquote(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === \"list\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.list(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1).raw.length).split(\"\\n\");\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw,\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list2 = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      while (src) {\n        let endEarly = false;\n        let raw = \"\";\n        let itemContents = \"\";\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split(\"\\n\", 1)[0].replace(this.rules.other.listReplaceTabs, (t) => \" \".repeat(3 * t.length));\n        let nextLine = src.split(\"\\n\", 1)[0];\n        let blankLine = !line.trim();\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n          while (src) {\n            const rawLine = src.split(\"\\n\", 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, \"  \");\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, \"    \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLineWithoutTabs.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n        if (!list2.loose) {\n          if (endsWithBlankLine) {\n            list2.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        let istask = null;\n        let ischecked;\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, \"\");\n          }\n        }\n        list2.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list2.raw += raw;\n      }\n      const lastItem = list2.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        return;\n      }\n      list2.raw = list2.raw.trimEnd();\n      for (let i = 0; i < list2.items.length; i++) {\n        this.lexer.state.top = false;\n        list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);\n        if (!list2.loose) {\n          const spacers = list2.items[i].tokens.filter((t) => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => this.rules.other.anyLine.test(t.raw));\n          list2.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list2.loose) {\n        for (let i = 0; i < list2.items.length; i++) {\n          list2.items[i].loose = true;\n        }\n      }\n      return list2;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\",\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag: tag2,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      return;\n    }\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\");\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, \"\").split(\"\\n\") : [];\n    const item = {\n      type: \"table\",\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: []\n    };\n    if (headers.length !== aligns.length) {\n      return;\n    }\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push(\"right\");\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push(\"center\");\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push(\"left\");\n      } else {\n        item.align.push(null);\n      }\n    }\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i]\n      });\n    }\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i]\n        };\n      }));\n    }\n    return item;\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: cap[1]\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex === -2) {\n          return;\n        }\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link2 = this.rules.other.pedanticHrefTitle.exec(href);\n        if (link2) {\n          href = link2[1];\n          title = link2[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, \"$1\") : title\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const link2 = links[linkString.toLowerCase()];\n      if (!link2) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link2, cap[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = \"\") {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue;\n        rLength = [...rDelim].length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, \" \");\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[1];\n        href = \"mailto:\" + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  url(src) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[0];\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? \"\";\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        escaped\n      };\n    }\n  }\n};\n\n// src/Lexer.ts\nvar _Lexer = class __Lexer {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n  constructor(options2) {\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */ Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(other.carriageReturn, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n    return this.tokens;\n  }\n  blockTokens(src, tokens = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, \"    \").replace(other.spaceLine, \"\");\n    }\n    while (src) {\n      let token;\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== void 0) {\n          lastToken.raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let maskedSrc = src;\n    let match = null;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    let keepPrevChar = false;\n    let prevChar = \"\";\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      let token;\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === \"text\" && lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class {\n  options;\n  parser;\n  // set by the parser\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(token) {\n    return \"\";\n  }\n  code({ text, lang, escaped }) {\n    const langString = (lang || \"\").match(other.notSpaceStart)?.[0];\n    const code = text.replace(other.endingNewline, \"\") + \"\\n\";\n    if (!langString) {\n      return \"<pre><code>\" + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"language-' + escape2(langString) + '\">' + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote({ tokens }) {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\n${body}</blockquote>\n`;\n  }\n  html({ text }) {\n    return text;\n  }\n  heading({ tokens, depth }) {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\n`;\n  }\n  hr(token) {\n    return \"<hr>\\n\";\n  }\n  list(token) {\n    const ordered = token.ordered;\n    const start = token.start;\n    let body = \"\";\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n    const type = ordered ? \"ol\" : \"ul\";\n    const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startAttr + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(item) {\n    let itemBody = \"\";\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === \"paragraph\") {\n          item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n            item.tokens[0].tokens[0].text = checkbox + \" \" + escape2(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: \"text\",\n            raw: checkbox + \" \",\n            text: checkbox + \" \",\n            escaped: true\n          });\n        }\n      } else {\n        itemBody += checkbox + \" \";\n      }\n    }\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n    return `<li>${itemBody}</li>\n`;\n  }\n  checkbox({ checked }) {\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph({ tokens }) {\n    return `<p>${this.parser.parseInline(tokens)}</p>\n`;\n  }\n  table(token) {\n    let header = \"\";\n    let cell = \"\";\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n    let body = \"\";\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n      cell = \"\";\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow({ text }) {\n    return `<tr>\n${text}</tr>\n`;\n  }\n  tablecell(token) {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? \"th\" : \"td\";\n    const tag2 = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n    return tag2 + content + `</${type}>\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong({ tokens }) {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n  em({ tokens }) {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n  codespan({ text }) {\n    return `<code>${escape2(text, true)}</code>`;\n  }\n  br(token) {\n    return \"<br>\";\n  }\n  del({ tokens }) {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n  link({ href, title, tokens }) {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + escape2(title) + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image({ href, title, text, tokens }) {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape2(text);\n    }\n    href = cleanHref;\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape2(title)}\"`;\n    }\n    out += \">\";\n    return out;\n  }\n  text(token) {\n    return \"tokens\" in token && token.tokens ? this.parser.parseInline(token.tokens) : \"escaped\" in token && token.escaped ? token.text : escape2(token.text);\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong({ text }) {\n    return text;\n  }\n  em({ text }) {\n    return text;\n  }\n  codespan({ text }) {\n    return text;\n  }\n  del({ text }) {\n    return text;\n  }\n  html({ text }) {\n    return text;\n  }\n  text({ text }) {\n    return text;\n  }\n  link({ text }) {\n    return \"\" + text;\n  }\n  image({ text }) {\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class __Parser {\n  options;\n  renderer;\n  textRenderer;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(genericToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"space\": {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case \"hr\": {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case \"heading\": {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case \"code\": {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case \"table\": {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case \"blockquote\": {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case \"list\": {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case \"html\": {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case \"paragraph\": {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case \"text\": {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === \"text\") {\n            textToken = tokens[++i];\n            body += \"\\n\" + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: \"paragraph\",\n              raw: body,\n              text: body,\n              tokens: [{ type: \"text\", raw: body, text: body, escaped: true }]\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer = this.renderer) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(anyToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"escape\": {\n          out += renderer.text(token);\n          break;\n        }\n        case \"html\": {\n          out += renderer.html(token);\n          break;\n        }\n        case \"link\": {\n          out += renderer.link(token);\n          break;\n        }\n        case \"image\": {\n          out += renderer.image(token);\n          break;\n        }\n        case \"strong\": {\n          out += renderer.strong(token);\n          break;\n        }\n        case \"em\": {\n          out += renderer.em(token);\n          break;\n        }\n        case \"codespan\": {\n          out += renderer.codespan(token);\n          break;\n        }\n        case \"br\": {\n          out += renderer.br(token);\n          break;\n        }\n        case \"del\": {\n          out += renderer.del(token);\n          break;\n        }\n        case \"text\": {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = class {\n  options;\n  block;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  static passThroughHooks = /* @__PURE__ */ new Set([\n    \"preprocess\",\n    \"postprocess\",\n    \"processAllTokens\"\n  ]);\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html2) {\n    return html2;\n  }\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens) {\n    return tokens;\n  }\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n};\n\n// src/Instance.ts\nvar Marked = class {\n  defaults = _getDefaults();\n  options = this.setOptions;\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n  constructor(...args) {\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\": {\n          const tableToken = token;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case \"list\": {\n          const listToken = token;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens2 = genericToken[childTokens].flat(Infinity);\n              values = values.concat(this.walkTokens(tokens2, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n    args.forEach((pack) => {\n      const opts = { ...pack };\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function(...args2) {\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"parser\"].includes(prop)) {\n            continue;\n          }\n          const rendererProp = prop;\n          const rendererFunc = pack.renderer[rendererProp];\n          const prevRenderer = renderer[rendererProp];\n          renderer[rendererProp] = (...args2) => {\n            let ret = rendererFunc.apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret || \"\";\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"rules\", \"lexer\"].includes(prop)) {\n            continue;\n          }\n          const tokenizerProp = prop;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp];\n          const prevTokenizer = tokenizer[tokenizerProp];\n          tokenizer[tokenizerProp] = (...args2) => {\n            let ret = tokenizerFunc.apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if ([\"options\", \"block\"].includes(prop)) {\n            continue;\n          }\n          const hooksProp = prop;\n          const hooksFunc = pack.hooks[hooksProp];\n          const prevHook = hooks[hooksProp];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[hooksProp] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[hooksProp] = (...args2) => {\n              let ret = hooksFunc.apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = { ...this.defaults, ...opts };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n  lexer(src, options2) {\n    return _Lexer.lex(src, options2 ?? this.defaults);\n  }\n  parser(tokens, options2) {\n    return _Parser.parse(tokens, options2 ?? this.defaults);\n  }\n  parseMarkdown(blockType) {\n    const parse2 = (src, options2) => {\n      const origOpt = { ...options2 };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      }\n      if (typeof src === \"undefined\" || src === null) {\n        return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n      }\n      if (typeof src !== \"string\") {\n        return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n      }\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n      const lexer2 = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n      const parser2 = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html2) => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);\n      }\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        let tokens = lexer2(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html2 = parser2(tokens, opt);\n        if (opt.hooks) {\n          html2 = opt.hooks.postprocess(html2);\n        }\n        return html2;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n    return parse2;\n  }\n  onError(silent, async) {\n    return (e) => {\n      e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n      if (silent) {\n        const msg = \"<p>An error occurred:</p><pre>\" + escape2(e.message + \"\", true) + \"</pre>\";\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\nmarked.options = marked.setOptions = function(options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport {\n  _Hooks as Hooks,\n  _Lexer as Lexer,\n  Marked,\n  _Parser as Parser,\n  _Renderer as Renderer,\n  _TextRenderer as TextRenderer,\n  _Tokenizer as Tokenizer,\n  _defaults as defaults,\n  _getDefaults as getDefaults,\n  lexer,\n  marked,\n  options,\n  parse,\n  parseInline,\n  parser,\n  setOptions,\n  use,\n  walkTokens\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA,SAASA,YAAYA,CAAA,EAAG;EACtB,OAAO;IACLC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE,KAAK;IACfC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE;EACd,CAAC;AACH;AACA,IAAIC,SAAS,GAAGX,YAAY,CAAC,CAAC;AAC9B,SAASY,cAAcA,CAACC,WAAW,EAAE;EACnCF,SAAS,GAAGE,WAAW;AACzB;;AAEA;AACA,IAAIC,QAAQ,GAAG;EAAEC,IAAI,EAAEA,CAAA,KAAM;AAAK,CAAC;AACnC,SAASC,IAAIA,CAACC,KAAK,EAAEC,GAAG,GAAG,EAAE,EAAE;EAC7B,IAAIC,MAAM,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACE,MAAM;EAC7D,MAAMC,GAAG,GAAG;IACVC,OAAO,EAAEA,CAACC,IAAI,EAAEC,GAAG,KAAK;MACtB,IAAIC,SAAS,GAAG,OAAOD,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,CAACJ,MAAM;MAC1DK,SAAS,GAAGA,SAAS,CAACH,OAAO,CAACI,KAAK,CAACC,KAAK,EAAE,IAAI,CAAC;MAChDP,MAAM,GAAGA,MAAM,CAACE,OAAO,CAACC,IAAI,EAAEE,SAAS,CAAC;MACxC,OAAOJ,GAAG;IACZ,CAAC;IACDO,QAAQ,EAAEA,CAAA,KAAM;MACd,OAAO,IAAIC,MAAM,CAACT,MAAM,EAAED,GAAG,CAAC;IAChC;EACF,CAAC;EACD,OAAOE,GAAG;AACZ;AACA,IAAIK,KAAK,GAAG;EACVI,gBAAgB,EAAE,wBAAwB;EAC1CC,iBAAiB,EAAE,aAAa;EAChCC,sBAAsB,EAAE,eAAe;EACvCC,cAAc,EAAE,MAAM;EACtBC,UAAU,EAAE,IAAI;EAChBC,iBAAiB,EAAE,IAAI;EACvBC,eAAe,EAAE,IAAI;EACrBC,YAAY,EAAE,MAAM;EACpBC,iBAAiB,EAAE,KAAK;EACxBC,aAAa,EAAE,KAAK;EACpBC,mBAAmB,EAAE,MAAM;EAC3BC,SAAS,EAAE,UAAU;EACrBC,eAAe,EAAE,mBAAmB;EACpCC,eAAe,EAAE,UAAU;EAC3BC,uBAAuB,EAAE,gCAAgC;EACzDC,wBAAwB,EAAE,kBAAkB;EAC5CC,eAAe,EAAE,MAAM;EACvBC,kBAAkB,EAAE,yBAAyB;EAC7CC,UAAU,EAAE,aAAa;EACzBC,eAAe,EAAE,cAAc;EAC/BC,OAAO,EAAE,QAAQ;EACjBC,YAAY,EAAE,UAAU;EACxBC,cAAc,EAAE,MAAM;EACtBC,eAAe,EAAE,YAAY;EAC7BC,iBAAiB,EAAE,WAAW;EAC9BC,eAAe,EAAE,WAAW;EAC5BC,gBAAgB,EAAE,YAAY;EAC9BC,cAAc,EAAE,WAAW;EAC3BC,SAAS,EAAE,OAAO;EAClBC,OAAO,EAAE,SAAS;EAClBC,iBAAiB,EAAE,gCAAgC;EACnDC,eAAe,EAAE,kCAAkC;EACnDC,iBAAiB,EAAE,IAAI;EACvBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,+BAA+B;EAClDC,mBAAmB,EAAE,eAAe;EACpCC,UAAU,EAAE,SAAS;EACrBC,aAAa,EAAE,UAAU;EACzBC,kBAAkB,EAAE,mDAAmD;EACvEC,qBAAqB,EAAE,oDAAoD;EAC3EC,YAAY,EAAE,4CAA4C;EAC1D3C,KAAK,EAAE,cAAc;EACrB4C,aAAa,EAAE,MAAM;EACrBC,QAAQ,EAAE,KAAK;EACfC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,OAAO;EAClBC,cAAc,EAAE,UAAU;EAC1BC,SAAS,EAAE,QAAQ;EACnBC,aAAa,EAAE,MAAM;EACrBC,aAAa,EAAE,KAAK;EACpBC,aAAa,EAAGC,IAAI,IAAK,IAAInD,MAAM,CAAE,WAAUmD,IAAK,8BAA6B,CAAC;EAClFC,eAAe,EAAGC,MAAM,IAAK,IAAIrD,MAAM,CAAE,QAAOsD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAG,CAAC,CAAE,oDAAmD,CAAC;EAC5HG,OAAO,EAAGH,MAAM,IAAK,IAAIrD,MAAM,CAAE,QAAOsD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAG,CAAC,CAAE,oDAAmD,CAAC;EACpHI,gBAAgB,EAAGJ,MAAM,IAAK,IAAIrD,MAAM,CAAE,QAAOsD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAG,CAAC,CAAE,iBAAgB,CAAC;EAC1FK,iBAAiB,EAAGL,MAAM,IAAK,IAAIrD,MAAM,CAAE,QAAOsD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAG,CAAC,CAAE,IAAG,CAAC;EAC9EM,cAAc,EAAGN,MAAM,IAAK,IAAIrD,MAAM,CAAE,QAAOsD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAG,CAAC,CAAE,oBAAmB,EAAE,GAAG;AACjG,CAAC;AACD,IAAIO,OAAO,GAAG,sBAAsB;AACpC,IAAIC,SAAS,GAAG,uDAAuD;AACvE,IAAIC,MAAM,GAAG,6GAA6G;AAC1H,IAAIC,EAAE,GAAG,oEAAoE;AAC7E,IAAIC,OAAO,GAAG,sCAAsC;AACpD,IAAIC,MAAM,GAAG,uBAAuB;AACpC,IAAIC,YAAY,GAAG,gKAAgK;AACnL,IAAIC,QAAQ,GAAG/E,IAAI,CAAC8E,YAAY,CAAC,CAACzE,OAAO,CAAC,OAAO,EAAEwE,MAAM,CAAC,CAACxE,OAAO,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAACA,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAACA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACM,QAAQ,CAAC,CAAC;AAChS,IAAIqE,WAAW,GAAGhF,IAAI,CAAC8E,YAAY,CAAC,CAACzE,OAAO,CAAC,OAAO,EAAEwE,MAAM,CAAC,CAACxE,OAAO,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAACA,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,mCAAmC,CAAC,CAACM,QAAQ,CAAC,CAAC;AAClU,IAAIsE,UAAU,GAAG,sFAAsF;AACvG,IAAIC,SAAS,GAAG,SAAS;AACzB,IAAIC,WAAW,GAAG,6BAA6B;AAC/C,IAAIC,GAAG,GAAGpF,IAAI,CAAC,6GAA6G,CAAC,CAACK,OAAO,CAAC,OAAO,EAAE8E,WAAW,CAAC,CAAC9E,OAAO,CAAC,OAAO,EAAE,8DAA8D,CAAC,CAACM,QAAQ,CAAC,CAAC;AACvP,IAAI0E,IAAI,GAAGrF,IAAI,CAAC,sCAAsC,CAAC,CAACK,OAAO,CAAC,OAAO,EAAEwE,MAAM,CAAC,CAAClE,QAAQ,CAAC,CAAC;AAC3F,IAAI2E,IAAI,GAAG,+VAA+V;AAC1W,IAAIC,QAAQ,GAAG,+BAA+B;AAC9C,IAAIC,IAAI,GAAGxF,IAAI,CACb,2dAA2d,EAC3d,GACF,CAAC,CAACK,OAAO,CAAC,SAAS,EAAEkF,QAAQ,CAAC,CAAClF,OAAO,CAAC,KAAK,EAAEiF,IAAI,CAAC,CAACjF,OAAO,CAAC,WAAW,EAAE,0EAA0E,CAAC,CAACM,QAAQ,CAAC,CAAC;AAC/J,IAAI8E,SAAS,GAAGzF,IAAI,CAACiF,UAAU,CAAC,CAAC5E,OAAO,CAAC,IAAI,EAAEsE,EAAE,CAAC,CAACtE,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAACA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAACA,OAAO,CAAC,KAAK,EAAEiF,IAAI,CAAC,CAAC3E,QAAQ,CAAC,CAAC;AAC3Y,IAAI+E,UAAU,GAAG1F,IAAI,CAAC,yCAAyC,CAAC,CAACK,OAAO,CAAC,WAAW,EAAEoF,SAAS,CAAC,CAAC9E,QAAQ,CAAC,CAAC;AAC3G,IAAIgF,WAAW,GAAG;EAChBD,UAAU;EACVE,IAAI,EAAEnB,SAAS;EACfW,GAAG;EACHV,MAAM;EACNE,OAAO;EACPD,EAAE;EACFa,IAAI;EACJT,QAAQ;EACRM,IAAI;EACJb,OAAO;EACPiB,SAAS;EACTI,KAAK,EAAE/F,QAAQ;EACfgG,IAAI,EAAEZ;AACR,CAAC;AACD,IAAIa,QAAQ,GAAG/F,IAAI,CACjB,6JACF,CAAC,CAACK,OAAO,CAAC,IAAI,EAAEsE,EAAE,CAAC,CAACtE,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAACA,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAACA,OAAO,CAAC,KAAK,EAAEiF,IAAI,CAAC,CAAC3E,QAAQ,CAAC,CAAC;AACvW,IAAIqF,QAAQ,GAAG;EACb,GAAGL,WAAW;EACdZ,QAAQ,EAAEC,WAAW;EACrBa,KAAK,EAAEE,QAAQ;EACfN,SAAS,EAAEzF,IAAI,CAACiF,UAAU,CAAC,CAAC5E,OAAO,CAAC,IAAI,EAAEsE,EAAE,CAAC,CAACtE,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAACA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE0F,QAAQ,CAAC,CAAC1F,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAACA,OAAO,CAAC,KAAK,EAAEiF,IAAI,CAAC,CAAC3E,QAAQ,CAAC;AAC5Y,CAAC;AACD,IAAIsF,aAAa,GAAG;EAClB,GAAGN,WAAW;EACdH,IAAI,EAAExF,IAAI,CACP,wIACH,CAAC,CAACK,OAAO,CAAC,SAAS,EAAEkF,QAAQ,CAAC,CAAClF,OAAO,CAAC,MAAM,EAAE,mKAAmK,CAAC,CAACM,QAAQ,CAAC,CAAC;EAC9NyE,GAAG,EAAE,mEAAmE;EACxER,OAAO,EAAE,wBAAwB;EACjCF,MAAM,EAAE5E,QAAQ;EAChB;EACAiF,QAAQ,EAAE,kCAAkC;EAC5CU,SAAS,EAAEzF,IAAI,CAACiF,UAAU,CAAC,CAAC5E,OAAO,CAAC,IAAI,EAAEsE,EAAE,CAAC,CAACtE,OAAO,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAACA,OAAO,CAAC,UAAU,EAAE0E,QAAQ,CAAC,CAAC1E,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACM,QAAQ,CAAC;AACzQ,CAAC;AACD,IAAIuF,MAAM,GAAG,6CAA6C;AAC1D,IAAIC,UAAU,GAAG,qCAAqC;AACtD,IAAIC,EAAE,GAAG,uBAAuB;AAChC,IAAIC,UAAU,GAAG,6EAA6E;AAC9F,IAAIC,YAAY,GAAG,eAAe;AAClC,IAAIC,mBAAmB,GAAG,iBAAiB;AAC3C,IAAIC,sBAAsB,GAAG,kBAAkB;AAC/C,IAAIC,WAAW,GAAGzG,IAAI,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAACK,OAAO,CAAC,aAAa,EAAEkG,mBAAmB,CAAC,CAAC5F,QAAQ,CAAC,CAAC;AAC3G,IAAI+F,uBAAuB,GAAG,oBAAoB;AAClD,IAAIC,8BAA8B,GAAG,sBAAsB;AAC3D,IAAIC,iCAAiC,GAAG,wBAAwB;AAChE,IAAIC,SAAS,GAAG,+EAA+E;AAC/F,IAAIC,kBAAkB,GAAG,+DAA+D;AACxF,IAAIC,cAAc,GAAG/G,IAAI,CAAC8G,kBAAkB,EAAE,GAAG,CAAC,CAACzG,OAAO,CAAC,QAAQ,EAAEiG,YAAY,CAAC,CAAC3F,QAAQ,CAAC,CAAC;AAC7F,IAAIqG,iBAAiB,GAAGhH,IAAI,CAAC8G,kBAAkB,EAAE,GAAG,CAAC,CAACzG,OAAO,CAAC,QAAQ,EAAEqG,uBAAuB,CAAC,CAAC/F,QAAQ,CAAC,CAAC;AAC3G,IAAIsG,qBAAqB,GAAG,uQAAuQ;AACnS,IAAIC,iBAAiB,GAAGlH,IAAI,CAACiH,qBAAqB,EAAE,IAAI,CAAC,CAAC5G,OAAO,CAAC,gBAAgB,EAAEmG,sBAAsB,CAAC,CAACnG,OAAO,CAAC,aAAa,EAAEkG,mBAAmB,CAAC,CAAClG,OAAO,CAAC,QAAQ,EAAEiG,YAAY,CAAC,CAAC3F,QAAQ,CAAC,CAAC;AAClM,IAAIwG,oBAAoB,GAAGnH,IAAI,CAACiH,qBAAqB,EAAE,IAAI,CAAC,CAAC5G,OAAO,CAAC,gBAAgB,EAAEuG,iCAAiC,CAAC,CAACvG,OAAO,CAAC,aAAa,EAAEsG,8BAA8B,CAAC,CAACtG,OAAO,CAAC,QAAQ,EAAEqG,uBAAuB,CAAC,CAAC/F,QAAQ,CAAC,CAAC;AACtO,IAAIyG,iBAAiB,GAAGpH,IAAI,CAC1B,kNAAkN,EAClN,IACF,CAAC,CAACK,OAAO,CAAC,gBAAgB,EAAEmG,sBAAsB,CAAC,CAACnG,OAAO,CAAC,aAAa,EAAEkG,mBAAmB,CAAC,CAAClG,OAAO,CAAC,QAAQ,EAAEiG,YAAY,CAAC,CAAC3F,QAAQ,CAAC,CAAC;AAC1I,IAAI0G,cAAc,GAAGrH,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAACK,OAAO,CAAC,QAAQ,EAAEiG,YAAY,CAAC,CAAC3F,QAAQ,CAAC,CAAC;AACvF,IAAI2G,QAAQ,GAAGtH,IAAI,CAAC,qCAAqC,CAAC,CAACK,OAAO,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,8IAA8I,CAAC,CAACM,QAAQ,CAAC,CAAC;AACxR,IAAI4G,cAAc,GAAGvH,IAAI,CAACuF,QAAQ,CAAC,CAAClF,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAACM,QAAQ,CAAC,CAAC;AAC1E,IAAI6G,GAAG,GAAGxH,IAAI,CACZ,0JACF,CAAC,CAACK,OAAO,CAAC,SAAS,EAAEkH,cAAc,CAAC,CAAClH,OAAO,CAAC,WAAW,EAAE,6EAA6E,CAAC,CAACM,QAAQ,CAAC,CAAC;AACnJ,IAAI8G,YAAY,GAAG,qDAAqD;AACxE,IAAIC,IAAI,GAAG1H,IAAI,CAAC,mEAAmE,CAAC,CAACK,OAAO,CAAC,OAAO,EAAEoH,YAAY,CAAC,CAACpH,OAAO,CAAC,MAAM,EAAE,yCAAyC,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,6DAA6D,CAAC,CAACM,QAAQ,CAAC,CAAC;AACzQ,IAAIgH,OAAO,GAAG3H,IAAI,CAAC,yBAAyB,CAAC,CAACK,OAAO,CAAC,OAAO,EAAEoH,YAAY,CAAC,CAACpH,OAAO,CAAC,KAAK,EAAE8E,WAAW,CAAC,CAACxE,QAAQ,CAAC,CAAC;AACnH,IAAIiH,MAAM,GAAG5H,IAAI,CAAC,uBAAuB,CAAC,CAACK,OAAO,CAAC,KAAK,EAAE8E,WAAW,CAAC,CAACxE,QAAQ,CAAC,CAAC;AACjF,IAAIkH,aAAa,GAAG7H,IAAI,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAACK,OAAO,CAAC,SAAS,EAAEsH,OAAO,CAAC,CAACtH,OAAO,CAAC,QAAQ,EAAEuH,MAAM,CAAC,CAACjH,QAAQ,CAAC,CAAC;AACvH,IAAImH,YAAY,GAAG;EACjBC,UAAU,EAAEjI,QAAQ;EACpB;EACAuH,cAAc;EACdC,QAAQ;EACRT,SAAS;EACTT,EAAE;EACFR,IAAI,EAAEO,UAAU;EAChB6B,GAAG,EAAElI,QAAQ;EACbiH,cAAc;EACdG,iBAAiB;EACjBE,iBAAiB;EACjBlB,MAAM;EACNwB,IAAI;EACJE,MAAM;EACNnB,WAAW;EACXkB,OAAO;EACPE,aAAa;EACbL,GAAG;EACH1B,IAAI,EAAEO,UAAU;EAChB4B,GAAG,EAAEnI;AACP,CAAC;AACD,IAAIoI,cAAc,GAAG;EACnB,GAAGJ,YAAY;EACfJ,IAAI,EAAE1H,IAAI,CAAC,yBAAyB,CAAC,CAACK,OAAO,CAAC,OAAO,EAAEoH,YAAY,CAAC,CAAC9G,QAAQ,CAAC,CAAC;EAC/EgH,OAAO,EAAE3H,IAAI,CAAC,+BAA+B,CAAC,CAACK,OAAO,CAAC,OAAO,EAAEoH,YAAY,CAAC,CAAC9G,QAAQ,CAAC;AACzF,CAAC;AACD,IAAIwH,SAAS,GAAG;EACd,GAAGL,YAAY;EACfZ,iBAAiB,EAAEC,oBAAoB;EACvCJ,cAAc,EAAEC,iBAAiB;EACjCiB,GAAG,EAAEjI,IAAI,CAAC,kEAAkE,EAAE,GAAG,CAAC,CAACK,OAAO,CAAC,OAAO,EAAE,2EAA2E,CAAC,CAACM,QAAQ,CAAC,CAAC;EAC3LoH,UAAU,EAAE,4EAA4E;EACxFC,GAAG,EAAE,+DAA+D;EACpElC,IAAI,EAAE;AACR,CAAC;AACD,IAAIsC,YAAY,GAAG;EACjB,GAAGD,SAAS;EACZ/B,EAAE,EAAEpG,IAAI,CAACoG,EAAE,CAAC,CAAC/F,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACM,QAAQ,CAAC,CAAC;EAC5CmF,IAAI,EAAE9F,IAAI,CAACmI,SAAS,CAACrC,IAAI,CAAC,CAACzF,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAACM,QAAQ,CAAC;AAC/F,CAAC;AACD,IAAI0H,KAAK,GAAG;EACVC,MAAM,EAAE3C,WAAW;EACnBvG,GAAG,EAAE4G,QAAQ;EACb1G,QAAQ,EAAE2G;AACZ,CAAC;AACD,IAAIsC,MAAM,GAAG;EACXD,MAAM,EAAER,YAAY;EACpB1I,GAAG,EAAE+I,SAAS;EACdjJ,MAAM,EAAEkJ,YAAY;EACpB9I,QAAQ,EAAE4I;AACZ,CAAC;;AAED;AACA,IAAIM,kBAAkB,GAAG;EACvB,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE;AACP,CAAC;AACD,IAAIC,oBAAoB,GAAIC,EAAE,IAAKF,kBAAkB,CAACE,EAAE,CAAC;AACzD,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,IAAIA,MAAM,EAAE;IACV,IAAIpI,KAAK,CAACwC,UAAU,CAAC6F,IAAI,CAACF,KAAK,CAAC,EAAE;MAChC,OAAOA,KAAK,CAACvI,OAAO,CAACI,KAAK,CAACyC,aAAa,EAAEuF,oBAAoB,CAAC;IACjE;EACF,CAAC,MAAM;IACL,IAAIhI,KAAK,CAAC0C,kBAAkB,CAAC2F,IAAI,CAACF,KAAK,CAAC,EAAE;MACxC,OAAOA,KAAK,CAACvI,OAAO,CAACI,KAAK,CAAC2C,qBAAqB,EAAEqF,oBAAoB,CAAC;IACzE;EACF;EACA,OAAOG,KAAK;AACd;AACA,SAASG,QAAQA,CAACC,IAAI,EAAE;EACtB,IAAI;IACFA,IAAI,GAAGC,SAAS,CAACD,IAAI,CAAC,CAAC3I,OAAO,CAACI,KAAK,CAAC6C,aAAa,EAAE,GAAG,CAAC;EAC1D,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;EACA,OAAO0F,IAAI;AACb;AACA,SAASE,UAAUA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EACnC,MAAMC,GAAG,GAAGF,QAAQ,CAAC9I,OAAO,CAACI,KAAK,CAAC8C,QAAQ,EAAE,CAAC+F,KAAK,EAAEC,MAAM,EAAEC,GAAG,KAAK;MACnE,IAAIC,OAAO,GAAG,KAAK;MACnB,IAAIC,IAAI,GAAGH,MAAM;MACjB,OAAO,EAAEG,IAAI,IAAI,CAAC,IAAIF,GAAG,CAACE,IAAI,CAAC,KAAK,IAAI,EAAED,OAAO,GAAG,CAACA,OAAO;MAC5D,IAAIA,OAAO,EAAE;QACX,OAAO,GAAG;MACZ,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAAEE,KAAK,GAAGN,GAAG,CAACO,KAAK,CAACnJ,KAAK,CAAC+C,SAAS,CAAC;EACtC,IAAIqG,CAAC,GAAG,CAAC;EACT,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,EAAE;IACpBH,KAAK,CAACI,KAAK,CAAC,CAAC;EACf;EACA,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,IAAI,CAACL,KAAK,CAACM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEH,IAAI,CAAC,CAAC,EAAE;IAC7CH,KAAK,CAACO,GAAG,CAAC,CAAC;EACb;EACA,IAAId,KAAK,EAAE;IACT,IAAIO,KAAK,CAACK,MAAM,GAAGZ,KAAK,EAAE;MACxBO,KAAK,CAACQ,MAAM,CAACf,KAAK,CAAC;IACrB,CAAC,MAAM;MACL,OAAOO,KAAK,CAACK,MAAM,GAAGZ,KAAK,EAAEO,KAAK,CAACS,IAAI,CAAC,EAAE,CAAC;IAC7C;EACF;EACA,OAAOP,CAAC,GAAGF,KAAK,CAACK,MAAM,EAAEH,CAAC,EAAE,EAAE;IAC5BF,KAAK,CAACE,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACzJ,OAAO,CAACI,KAAK,CAACgD,SAAS,EAAE,GAAG,CAAC;EAC1D;EACA,OAAOkG,KAAK;AACd;AACA,SAASU,KAAKA,CAACb,GAAG,EAAEc,CAAC,EAAEC,MAAM,EAAE;EAC7B,MAAMC,CAAC,GAAGhB,GAAG,CAACQ,MAAM;EACpB,IAAIQ,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,EAAE;EACX;EACA,IAAIC,OAAO,GAAG,CAAC;EACf,OAAOA,OAAO,GAAGD,CAAC,EAAE;IAClB,MAAME,QAAQ,GAAGlB,GAAG,CAACmB,MAAM,CAACH,CAAC,GAAGC,OAAO,GAAG,CAAC,CAAC;IAC5C,IAAIC,QAAQ,KAAKJ,CAAC,IAAI,CAACC,MAAM,EAAE;MAC7BE,OAAO,EAAE;IACX,CAAC,MAAM,IAAIC,QAAQ,KAAKJ,CAAC,IAAIC,MAAM,EAAE;MACnCE,OAAO,EAAE;IACX,CAAC,MAAM;MACL;IACF;EACF;EACA,OAAOjB,GAAG,CAACoB,KAAK,CAAC,CAAC,EAAEJ,CAAC,GAAGC,OAAO,CAAC;AAClC;AACA,SAASI,kBAAkBA,CAACrB,GAAG,EAAEsB,CAAC,EAAE;EAClC,IAAItB,GAAG,CAACuB,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5B,OAAO,CAAC,CAAC;EACX;EACA,IAAIE,KAAK,GAAG,CAAC;EACb,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACQ,MAAM,EAAEH,CAAC,EAAE,EAAE;IACnC,IAAIL,GAAG,CAACK,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBA,CAAC,EAAE;IACL,CAAC,MAAM,IAAIL,GAAG,CAACK,CAAC,CAAC,KAAKiB,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1BE,KAAK,EAAE;IACT,CAAC,MAAM,IAAIxB,GAAG,CAACK,CAAC,CAAC,KAAKiB,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1BE,KAAK,EAAE;MACP,IAAIA,KAAK,GAAG,CAAC,EAAE;QACb,OAAOnB,CAAC;MACV;IACF;EACF;EACA,IAAImB,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,CAAC,CAAC;EACX;EACA,OAAO,CAAC,CAAC;AACX;;AAEA;AACA,SAASC,UAAUA,CAACC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAClD,MAAMtC,IAAI,GAAGmC,KAAK,CAACnC,IAAI;EACvB,MAAMuC,KAAK,GAAGJ,KAAK,CAACI,KAAK,IAAI,IAAI;EACjC,MAAMzF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAACiL,KAAK,CAAC7K,KAAK,CAACK,iBAAiB,EAAE,IAAI,CAAC;EAChEuK,MAAM,CAACG,KAAK,CAACC,MAAM,GAAG,IAAI;EAC1B,MAAMC,KAAK,GAAG;IACZC,IAAI,EAAET,GAAG,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,OAAO,GAAG,MAAM;IACjDS,GAAG;IACHpC,IAAI;IACJuC,KAAK;IACLzF,IAAI;IACJ8F,MAAM,EAAEP,MAAM,CAACQ,YAAY,CAAC/F,IAAI;EAClC,CAAC;EACDuF,MAAM,CAACG,KAAK,CAACC,MAAM,GAAG,KAAK;EAC3B,OAAOC,KAAK;AACd;AACA,SAAS3K,sBAAsBA,CAACqK,GAAG,EAAEtF,IAAI,EAAEwF,KAAK,EAAE;EAChD,MAAMQ,iBAAiB,GAAGV,GAAG,CAAC9B,KAAK,CAACgC,KAAK,CAAC7K,KAAK,CAACM,sBAAsB,CAAC;EACvE,IAAI+K,iBAAiB,KAAK,IAAI,EAAE;IAC9B,OAAOhG,IAAI;EACb;EACA,MAAMiG,YAAY,GAAGD,iBAAiB,CAAC,CAAC,CAAC;EACzC,OAAOhG,IAAI,CAAC8D,KAAK,CAAC,IAAI,CAAC,CAACoC,GAAG,CAAEC,IAAI,IAAK;IACpC,MAAMC,iBAAiB,GAAGD,IAAI,CAAC3C,KAAK,CAACgC,KAAK,CAAC7K,KAAK,CAACO,cAAc,CAAC;IAChE,IAAIkL,iBAAiB,KAAK,IAAI,EAAE;MAC9B,OAAOD,IAAI;IACb;IACA,MAAM,CAACE,YAAY,CAAC,GAAGD,iBAAiB;IACxC,IAAIC,YAAY,CAACnC,MAAM,IAAI+B,YAAY,CAAC/B,MAAM,EAAE;MAC9C,OAAOiC,IAAI,CAACrB,KAAK,CAACmB,YAAY,CAAC/B,MAAM,CAAC;IACxC;IACA,OAAOiC,IAAI;EACb,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;AACf;AACA,IAAIC,UAAU,GAAG,MAAM;EACrBC,OAAO;EACPhB,KAAK;EACL;EACAiB,KAAK;EACL;EACAC,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACH,OAAO,GAAGG,QAAQ,IAAI9M,SAAS;EACtC;EACA+M,KAAKA,CAACC,GAAG,EAAE;IACT,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC7D,OAAO,CAACzE,IAAI,CAAC4M,GAAG,CAAC;IAC9C,IAAIzB,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAO;QACL2B,IAAI,EAAE,OAAO;QACbP,GAAG,EAAEF,GAAG,CAAC,CAAC;MACZ,CAAC;IACH;EACF;EACAtF,IAAIA,CAAC+G,GAAG,EAAE;IACR,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACzC,IAAI,CAAC7F,IAAI,CAAC4M,GAAG,CAAC;IAC3C,IAAIzB,GAAG,EAAE;MACP,MAAMpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACI,gBAAgB,EAAE,EAAE,CAAC;MAClE,OAAO;QACL8K,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACX0B,cAAc,EAAE,UAAU;QAC1B9G,IAAI,EAAE,CAAC,IAAI,CAACwG,OAAO,CAAChN,QAAQ,GAAG+K,KAAK,CAACvE,IAAI,EAAE,IAAI,CAAC,GAAGA;MACrD,CAAC;IACH;EACF;EACApB,MAAMA,CAACiI,GAAG,EAAE;IACV,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC3D,MAAM,CAAC3E,IAAI,CAAC4M,GAAG,CAAC;IAC7C,IAAIzB,GAAG,EAAE;MACP,MAAME,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;MAClB,MAAMpF,IAAI,GAAG/E,sBAAsB,CAACqK,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAACI,KAAK,CAAC;MAClE,OAAO;QACLK,IAAI,EAAE,MAAM;QACZP,GAAG;QACHyB,IAAI,EAAE3B,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACpB,IAAI,CAAC,CAAC,CAACzJ,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC/C,MAAM,CAAClB,cAAc,EAAE,IAAI,CAAC,GAAG6D,GAAG,CAAC,CAAC,CAAC;QACrFpF;MACF,CAAC;IACH;EACF;EACAlB,OAAOA,CAAC+H,GAAG,EAAE;IACX,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACzD,OAAO,CAAC7E,IAAI,CAAC4M,GAAG,CAAC;IAC9C,IAAIzB,GAAG,EAAE;MACP,IAAIpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAACpB,IAAI,CAAC,CAAC;MACxB,IAAI,IAAI,CAACwB,KAAK,CAAC7K,KAAK,CAACQ,UAAU,CAAC6H,IAAI,CAAChD,IAAI,CAAC,EAAE;QAC1C,MAAMgH,OAAO,GAAGzC,KAAK,CAACvE,IAAI,EAAE,GAAG,CAAC;QAChC,IAAI,IAAI,CAACwG,OAAO,CAAChN,QAAQ,EAAE;UACzBwG,IAAI,GAAGgH,OAAO,CAAChD,IAAI,CAAC,CAAC;QACvB,CAAC,MAAM,IAAI,CAACgD,OAAO,IAAI,IAAI,CAACxB,KAAK,CAAC7K,KAAK,CAACU,eAAe,CAAC2H,IAAI,CAACgE,OAAO,CAAC,EAAE;UACrEhH,IAAI,GAAGgH,OAAO,CAAChD,IAAI,CAAC,CAAC;QACvB;MACF;MACA,OAAO;QACL6B,IAAI,EAAE,SAAS;QACfP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACX6B,KAAK,EAAE7B,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM;QACpBlE,IAAI;QACJ8F,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAACzC,IAAI;MAChC,CAAC;IACH;EACF;EACAnB,EAAEA,CAACgI,GAAG,EAAE;IACN,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC1D,EAAE,CAAC5E,IAAI,CAAC4M,GAAG,CAAC;IACzC,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,IAAI;QACVP,GAAG,EAAEf,KAAK,CAACa,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI;MACzB,CAAC;IACH;EACF;EACAxF,UAAUA,CAACiH,GAAG,EAAE;IACd,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC3C,UAAU,CAAC3F,IAAI,CAAC4M,GAAG,CAAC;IACjD,IAAIzB,GAAG,EAAE;MACP,IAAI8B,KAAK,GAAG3C,KAAK,CAACa,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAACtB,KAAK,CAAC,IAAI,CAAC;MAC3C,IAAIwB,GAAG,GAAG,EAAE;MACZ,IAAItF,IAAI,GAAG,EAAE;MACb,MAAM8F,MAAM,GAAG,EAAE;MACjB,OAAOoB,KAAK,CAAChD,MAAM,GAAG,CAAC,EAAE;QACvB,IAAIiD,YAAY,GAAG,KAAK;QACxB,MAAMC,YAAY,GAAG,EAAE;QACvB,IAAIrD,CAAC;QACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmD,KAAK,CAAChD,MAAM,EAAEH,CAAC,EAAE,EAAE;UACjC,IAAI,IAAI,CAACyB,KAAK,CAAC7K,KAAK,CAACiB,eAAe,CAACoH,IAAI,CAACkE,KAAK,CAACnD,CAAC,CAAC,CAAC,EAAE;YACnDqD,YAAY,CAAC9C,IAAI,CAAC4C,KAAK,CAACnD,CAAC,CAAC,CAAC;YAC3BoD,YAAY,GAAG,IAAI;UACrB,CAAC,MAAM,IAAI,CAACA,YAAY,EAAE;YACxBC,YAAY,CAAC9C,IAAI,CAAC4C,KAAK,CAACnD,CAAC,CAAC,CAAC;UAC7B,CAAC,MAAM;YACL;UACF;QACF;QACAmD,KAAK,GAAGA,KAAK,CAACpC,KAAK,CAACf,CAAC,CAAC;QACtB,MAAMsD,UAAU,GAAGD,YAAY,CAACd,IAAI,CAAC,IAAI,CAAC;QAC1C,MAAMgB,WAAW,GAAGD,UAAU,CAAC9M,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACkB,uBAAuB,EAAE,UAAU,CAAC,CAACtB,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACmB,wBAAwB,EAAE,EAAE,CAAC;QACnJwJ,GAAG,GAAGA,GAAG,GAAI,GAAEA,GAAI;AAC3B,EAAE+B,UAAW,EAAC,GAAGA,UAAU;QACnBrH,IAAI,GAAGA,IAAI,GAAI,GAAEA,IAAK;AAC9B,EAAEsH,WAAY,EAAC,GAAGA,WAAW;QACrB,MAAMC,GAAG,GAAG,IAAI,CAACd,KAAK,CAACf,KAAK,CAAC6B,GAAG;QAChC,IAAI,CAACd,KAAK,CAACf,KAAK,CAAC6B,GAAG,GAAG,IAAI;QAC3B,IAAI,CAACd,KAAK,CAACe,WAAW,CAACF,WAAW,EAAExB,MAAM,EAAE,IAAI,CAAC;QACjD,IAAI,CAACW,KAAK,CAACf,KAAK,CAAC6B,GAAG,GAAGA,GAAG;QAC1B,IAAIL,KAAK,CAAChD,MAAM,KAAK,CAAC,EAAE;UACtB;QACF;QACA,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIsD,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UAC9B;QACF,CAAC,MAAM,IAAI4B,SAAS,EAAE5B,IAAI,KAAK,YAAY,EAAE;UAC3C,MAAM6B,QAAQ,GAAGD,SAAS;UAC1B,MAAME,OAAO,GAAGD,QAAQ,CAACpC,GAAG,GAAG,IAAI,GAAG4B,KAAK,CAACZ,IAAI,CAAC,IAAI,CAAC;UACtD,MAAMsB,QAAQ,GAAG,IAAI,CAAChI,UAAU,CAAC+H,OAAO,CAAC;UACzC7B,MAAM,CAACA,MAAM,CAAC5B,MAAM,GAAG,CAAC,CAAC,GAAG0D,QAAQ;UACpCtC,GAAG,GAAGA,GAAG,CAACuC,SAAS,CAAC,CAAC,EAAEvC,GAAG,CAACpB,MAAM,GAAGwD,QAAQ,CAACpC,GAAG,CAACpB,MAAM,CAAC,GAAG0D,QAAQ,CAACtC,GAAG;UACvEtF,IAAI,GAAGA,IAAI,CAAC6H,SAAS,CAAC,CAAC,EAAE7H,IAAI,CAACkE,MAAM,GAAGwD,QAAQ,CAAC1H,IAAI,CAACkE,MAAM,CAAC,GAAG0D,QAAQ,CAAC5H,IAAI;UAC5E;QACF,CAAC,MAAM,IAAIyH,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UACrC,MAAM6B,QAAQ,GAAGD,SAAS;UAC1B,MAAME,OAAO,GAAGD,QAAQ,CAACpC,GAAG,GAAG,IAAI,GAAG4B,KAAK,CAACZ,IAAI,CAAC,IAAI,CAAC;UACtD,MAAMsB,QAAQ,GAAG,IAAI,CAACrI,IAAI,CAACoI,OAAO,CAAC;UACnC7B,MAAM,CAACA,MAAM,CAAC5B,MAAM,GAAG,CAAC,CAAC,GAAG0D,QAAQ;UACpCtC,GAAG,GAAGA,GAAG,CAACuC,SAAS,CAAC,CAAC,EAAEvC,GAAG,CAACpB,MAAM,GAAGuD,SAAS,CAACnC,GAAG,CAACpB,MAAM,CAAC,GAAG0D,QAAQ,CAACtC,GAAG;UACxEtF,IAAI,GAAGA,IAAI,CAAC6H,SAAS,CAAC,CAAC,EAAE7H,IAAI,CAACkE,MAAM,GAAGwD,QAAQ,CAACpC,GAAG,CAACpB,MAAM,CAAC,GAAG0D,QAAQ,CAACtC,GAAG;UAC1E4B,KAAK,GAAGS,OAAO,CAACE,SAAS,CAAC/B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,CAACmB,GAAG,CAACpB,MAAM,CAAC,CAACJ,KAAK,CAAC,IAAI,CAAC;UAC/D;QACF;MACF;MACA,OAAO;QACL+B,IAAI,EAAE,YAAY;QAClBP,GAAG;QACHQ,MAAM;QACN9F;MACF,CAAC;IACH;EACF;EACAT,IAAIA,CAACsH,GAAG,EAAE;IACR,IAAIzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAChD,IAAI,CAACtF,IAAI,CAAC4M,GAAG,CAAC;IACzC,IAAIzB,GAAG,EAAE;MACP,IAAInH,IAAI,GAAGmH,GAAG,CAAC,CAAC,CAAC,CAACpB,IAAI,CAAC,CAAC;MACxB,MAAM8D,SAAS,GAAG7J,IAAI,CAACiG,MAAM,GAAG,CAAC;MACjC,MAAM6D,KAAK,GAAG;QACZlC,IAAI,EAAE,MAAM;QACZP,GAAG,EAAE,EAAE;QACP0C,OAAO,EAAEF,SAAS;QAClBG,KAAK,EAAEH,SAAS,GAAG,CAAC7J,IAAI,CAAC6G,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1CoD,KAAK,EAAE,KAAK;QACZC,KAAK,EAAE;MACT,CAAC;MACDlK,IAAI,GAAG6J,SAAS,GAAI,aAAY7J,IAAI,CAAC6G,KAAK,CAAC,CAAC,CAAC,CAAE,EAAC,GAAI,KAAI7G,IAAK,EAAC;MAC9D,IAAI,IAAI,CAACuI,OAAO,CAAChN,QAAQ,EAAE;QACzByE,IAAI,GAAG6J,SAAS,GAAG7J,IAAI,GAAG,OAAO;MACnC;MACA,MAAMmK,SAAS,GAAG,IAAI,CAAC5C,KAAK,CAAC7K,KAAK,CAACqD,aAAa,CAACC,IAAI,CAAC;MACtD,IAAIoK,iBAAiB,GAAG,KAAK;MAC7B,OAAOxB,GAAG,EAAE;QACV,IAAIyB,QAAQ,GAAG,KAAK;QACpB,IAAIhD,GAAG,GAAG,EAAE;QACZ,IAAIiD,YAAY,GAAG,EAAE;QACrB,IAAI,EAAEnD,GAAG,GAAGgD,SAAS,CAACnO,IAAI,CAAC4M,GAAG,CAAC,CAAC,EAAE;UAChC;QACF;QACA,IAAI,IAAI,CAACrB,KAAK,CAACjD,KAAK,CAAC1D,EAAE,CAACmE,IAAI,CAAC6D,GAAG,CAAC,EAAE;UACjC;QACF;QACAvB,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;QACZyB,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACvC,GAAG,CAACpB,MAAM,CAAC;QAC/B,IAAIsE,IAAI,GAAGpD,GAAG,CAAC,CAAC,CAAC,CAACtB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAACvJ,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACoB,eAAe,EAAG0M,CAAC,IAAK,GAAG,CAACC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACvE,MAAM,CAAC,CAAC;QAC9G,IAAIyE,QAAQ,GAAG9B,GAAG,CAAC/C,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACpC,IAAIpI,SAAS,GAAG,CAAC8M,IAAI,CAACxE,IAAI,CAAC,CAAC;QAC5B,IAAI7F,MAAM,GAAG,CAAC;QACd,IAAI,IAAI,CAACqI,OAAO,CAAChN,QAAQ,EAAE;UACzB2E,MAAM,GAAG,CAAC;UACVoK,YAAY,GAAGC,IAAI,CAACI,SAAS,CAAC,CAAC;QACjC,CAAC,MAAM,IAAIlN,SAAS,EAAE;UACpByC,MAAM,GAAGiH,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM,GAAG,CAAC;QAC5B,CAAC,MAAM;UACL/F,MAAM,GAAGiH,GAAG,CAAC,CAAC,CAAC,CAACyD,MAAM,CAAC,IAAI,CAACrD,KAAK,CAAC7K,KAAK,CAACW,YAAY,CAAC;UACrD6C,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGA,MAAM;UAChCoK,YAAY,GAAGC,IAAI,CAAC1D,KAAK,CAAC3G,MAAM,CAAC;UACjCA,MAAM,IAAIiH,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM;QACzB;QACA,IAAIxI,SAAS,IAAI,IAAI,CAAC8J,KAAK,CAAC7K,KAAK,CAACe,SAAS,CAACsH,IAAI,CAAC2F,QAAQ,CAAC,EAAE;UAC1DrD,GAAG,IAAIqD,QAAQ,GAAG,IAAI;UACtB9B,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACc,QAAQ,CAACzE,MAAM,GAAG,CAAC,CAAC;UACxCoE,QAAQ,GAAG,IAAI;QACjB;QACA,IAAI,CAACA,QAAQ,EAAE;UACb,MAAMpK,eAAe,GAAG,IAAI,CAACsH,KAAK,CAAC7K,KAAK,CAACuD,eAAe,CAACC,MAAM,CAAC;UAChE,MAAMG,OAAO,GAAG,IAAI,CAACkH,KAAK,CAAC7K,KAAK,CAAC2D,OAAO,CAACH,MAAM,CAAC;UAChD,MAAMI,gBAAgB,GAAG,IAAI,CAACiH,KAAK,CAAC7K,KAAK,CAAC4D,gBAAgB,CAACJ,MAAM,CAAC;UAClE,MAAMK,iBAAiB,GAAG,IAAI,CAACgH,KAAK,CAAC7K,KAAK,CAAC6D,iBAAiB,CAACL,MAAM,CAAC;UACpE,MAAMM,cAAc,GAAG,IAAI,CAAC+G,KAAK,CAAC7K,KAAK,CAAC8D,cAAc,CAACN,MAAM,CAAC;UAC9D,OAAO0I,GAAG,EAAE;YACV,MAAMiC,OAAO,GAAGjC,GAAG,CAAC/C,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,IAAIiF,mBAAmB;YACvBJ,QAAQ,GAAGG,OAAO;YAClB,IAAI,IAAI,CAACtC,OAAO,CAAChN,QAAQ,EAAE;cACzBmP,QAAQ,GAAGA,QAAQ,CAACpO,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACqB,kBAAkB,EAAE,IAAI,CAAC;cACtE+M,mBAAmB,GAAGJ,QAAQ;YAChC,CAAC,MAAM;cACLI,mBAAmB,GAAGJ,QAAQ,CAACpO,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACa,aAAa,EAAE,MAAM,CAAC;YAChF;YACA,IAAI+C,gBAAgB,CAACyE,IAAI,CAAC2F,QAAQ,CAAC,EAAE;cACnC;YACF;YACA,IAAInK,iBAAiB,CAACwE,IAAI,CAAC2F,QAAQ,CAAC,EAAE;cACpC;YACF;YACA,IAAIlK,cAAc,CAACuE,IAAI,CAAC2F,QAAQ,CAAC,EAAE;cACjC;YACF;YACA,IAAIzK,eAAe,CAAC8E,IAAI,CAAC2F,QAAQ,CAAC,EAAE;cAClC;YACF;YACA,IAAIrK,OAAO,CAAC0E,IAAI,CAAC2F,QAAQ,CAAC,EAAE;cAC1B;YACF;YACA,IAAII,mBAAmB,CAACF,MAAM,CAAC,IAAI,CAACrD,KAAK,CAAC7K,KAAK,CAACW,YAAY,CAAC,IAAI6C,MAAM,IAAI,CAACwK,QAAQ,CAAC3E,IAAI,CAAC,CAAC,EAAE;cAC3FuE,YAAY,IAAI,IAAI,GAAGQ,mBAAmB,CAACjE,KAAK,CAAC3G,MAAM,CAAC;YAC1D,CAAC,MAAM;cACL,IAAIzC,SAAS,EAAE;gBACb;cACF;cACA,IAAI8M,IAAI,CAACjO,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACa,aAAa,EAAE,MAAM,CAAC,CAACqN,MAAM,CAAC,IAAI,CAACrD,KAAK,CAAC7K,KAAK,CAACW,YAAY,CAAC,IAAI,CAAC,EAAE;gBACnG;cACF;cACA,IAAIiD,gBAAgB,CAACyE,IAAI,CAACwF,IAAI,CAAC,EAAE;gBAC/B;cACF;cACA,IAAIhK,iBAAiB,CAACwE,IAAI,CAACwF,IAAI,CAAC,EAAE;gBAChC;cACF;cACA,IAAIlK,OAAO,CAAC0E,IAAI,CAACwF,IAAI,CAAC,EAAE;gBACtB;cACF;cACAD,YAAY,IAAI,IAAI,GAAGI,QAAQ;YACjC;YACA,IAAI,CAACjN,SAAS,IAAI,CAACiN,QAAQ,CAAC3E,IAAI,CAAC,CAAC,EAAE;cAClCtI,SAAS,GAAG,IAAI;YAClB;YACA4J,GAAG,IAAIwD,OAAO,GAAG,IAAI;YACrBjC,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACiB,OAAO,CAAC5E,MAAM,GAAG,CAAC,CAAC;YACvCsE,IAAI,GAAGO,mBAAmB,CAACjE,KAAK,CAAC3G,MAAM,CAAC;UAC1C;QACF;QACA,IAAI,CAAC4J,KAAK,CAACG,KAAK,EAAE;UAChB,IAAIG,iBAAiB,EAAE;YACrBN,KAAK,CAACG,KAAK,GAAG,IAAI;UACpB,CAAC,MAAM,IAAI,IAAI,CAAC1C,KAAK,CAAC7K,KAAK,CAACgB,eAAe,CAACqH,IAAI,CAACsC,GAAG,CAAC,EAAE;YACrD+C,iBAAiB,GAAG,IAAI;UAC1B;QACF;QACA,IAAIW,MAAM,GAAG,IAAI;QACjB,IAAIC,SAAS;QACb,IAAI,IAAI,CAACzC,OAAO,CAAClN,GAAG,EAAE;UACpB0P,MAAM,GAAG,IAAI,CAACxD,KAAK,CAAC7K,KAAK,CAACsB,UAAU,CAAChC,IAAI,CAACsO,YAAY,CAAC;UACvD,IAAIS,MAAM,EAAE;YACVC,SAAS,GAAGD,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM;YAChCT,YAAY,GAAGA,YAAY,CAAChO,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACuB,eAAe,EAAE,EAAE,CAAC;UAC3E;QACF;QACA6L,KAAK,CAACI,KAAK,CAAC7D,IAAI,CAAC;UACfuB,IAAI,EAAE,WAAW;UACjBP,GAAG;UACH4D,IAAI,EAAE,CAAC,CAACF,MAAM;UACdG,OAAO,EAAEF,SAAS;UAClBf,KAAK,EAAE,KAAK;UACZlI,IAAI,EAAEuI,YAAY;UAClBzC,MAAM,EAAE;QACV,CAAC,CAAC;QACFiC,KAAK,CAACzC,GAAG,IAAIA,GAAG;MAClB;MACA,MAAM8D,QAAQ,GAAGrB,KAAK,CAACI,KAAK,CAAChE,EAAE,CAAC,CAAC,CAAC,CAAC;MACnC,IAAIiF,QAAQ,EAAE;QACZA,QAAQ,CAAC9D,GAAG,GAAG8D,QAAQ,CAAC9D,GAAG,CAAC+D,OAAO,CAAC,CAAC;QACrCD,QAAQ,CAACpJ,IAAI,GAAGoJ,QAAQ,CAACpJ,IAAI,CAACqJ,OAAO,CAAC,CAAC;MACzC,CAAC,MAAM;QACL;MACF;MACAtB,KAAK,CAACzC,GAAG,GAAGyC,KAAK,CAACzC,GAAG,CAAC+D,OAAO,CAAC,CAAC;MAC/B,KAAK,IAAItF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgE,KAAK,CAACI,KAAK,CAACjE,MAAM,EAAEH,CAAC,EAAE,EAAE;QAC3C,IAAI,CAAC0C,KAAK,CAACf,KAAK,CAAC6B,GAAG,GAAG,KAAK;QAC5BQ,KAAK,CAACI,KAAK,CAACpE,CAAC,CAAC,CAAC+B,MAAM,GAAG,IAAI,CAACW,KAAK,CAACe,WAAW,CAACO,KAAK,CAACI,KAAK,CAACpE,CAAC,CAAC,CAAC/D,IAAI,EAAE,EAAE,CAAC;QACvE,IAAI,CAAC+H,KAAK,CAACG,KAAK,EAAE;UAChB,MAAMoB,OAAO,GAAGvB,KAAK,CAACI,KAAK,CAACpE,CAAC,CAAC,CAAC+B,MAAM,CAACyD,MAAM,CAAEd,CAAC,IAAKA,CAAC,CAAC5C,IAAI,KAAK,OAAO,CAAC;UACvE,MAAM2D,qBAAqB,GAAGF,OAAO,CAACpF,MAAM,GAAG,CAAC,IAAIoF,OAAO,CAACG,IAAI,CAAEhB,CAAC,IAAK,IAAI,CAACjD,KAAK,CAAC7K,KAAK,CAACwB,OAAO,CAAC6G,IAAI,CAACyF,CAAC,CAACnD,GAAG,CAAC,CAAC;UAC7GyC,KAAK,CAACG,KAAK,GAAGsB,qBAAqB;QACrC;MACF;MACA,IAAIzB,KAAK,CAACG,KAAK,EAAE;QACf,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgE,KAAK,CAACI,KAAK,CAACjE,MAAM,EAAEH,CAAC,EAAE,EAAE;UAC3CgE,KAAK,CAACI,KAAK,CAACpE,CAAC,CAAC,CAACmE,KAAK,GAAG,IAAI;QAC7B;MACF;MACA,OAAOH,KAAK;IACd;EACF;EACArI,IAAIA,CAACmH,GAAG,EAAE;IACR,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC7C,IAAI,CAACzF,IAAI,CAAC4M,GAAG,CAAC;IAC3C,IAAIzB,GAAG,EAAE;MACP,MAAMQ,KAAK,GAAG;QACZC,IAAI,EAAE,MAAM;QACZtD,KAAK,EAAE,IAAI;QACX+C,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXsE,GAAG,EAAEtE,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO;QAClEpF,IAAI,EAAEoF,GAAG,CAAC,CAAC;MACb,CAAC;MACD,OAAOQ,KAAK;IACd;EACF;EACAtG,GAAGA,CAACuH,GAAG,EAAE;IACP,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACjD,GAAG,CAACrF,IAAI,CAAC4M,GAAG,CAAC;IAC1C,IAAIzB,GAAG,EAAE;MACP,MAAMuE,IAAI,GAAGvE,GAAG,CAAC,CAAC,CAAC,CAACwE,WAAW,CAAC,CAAC,CAACrP,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACc,mBAAmB,EAAE,GAAG,CAAC;MACpF,MAAMyH,IAAI,GAAGkC,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACyB,YAAY,EAAE,IAAI,CAAC,CAAC7B,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC/C,MAAM,CAAClB,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE;MAC9H,MAAMkE,KAAK,GAAGL,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACyC,SAAS,CAAC,CAAC,EAAEzC,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAC,CAAC3J,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC/C,MAAM,CAAClB,cAAc,EAAE,IAAI,CAAC,GAAG6D,GAAG,CAAC,CAAC,CAAC;MACtH,OAAO;QACLS,IAAI,EAAE,KAAK;QACXnE,GAAG,EAAEiI,IAAI;QACTrE,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXlC,IAAI;QACJuC;MACF,CAAC;IACH;EACF;EACA1F,KAAKA,CAAC8G,GAAG,EAAE;IACT,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACxC,KAAK,CAAC9F,IAAI,CAAC4M,GAAG,CAAC;IAC5C,IAAI,CAACzB,GAAG,EAAE;MACR;IACF;IACA,IAAI,CAAC,IAAI,CAACI,KAAK,CAAC7K,KAAK,CAAC0B,cAAc,CAAC2G,IAAI,CAACoC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACjD;IACF;IACA,MAAMyE,OAAO,GAAGzG,UAAU,CAACgC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM0E,MAAM,GAAG1E,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAAC2B,eAAe,EAAE,EAAE,CAAC,CAACwH,KAAK,CAAC,GAAG,CAAC;IAC9E,MAAMiG,IAAI,GAAG3E,GAAG,CAAC,CAAC,CAAC,EAAEpB,IAAI,CAAC,CAAC,GAAGoB,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAAC4B,iBAAiB,EAAE,EAAE,CAAC,CAACuH,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;IACrG,MAAMkG,IAAI,GAAG;MACXnE,IAAI,EAAE,OAAO;MACbP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;MACX6E,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTH,IAAI,EAAE;IACR,CAAC;IACD,IAAIF,OAAO,CAAC3F,MAAM,KAAK4F,MAAM,CAAC5F,MAAM,EAAE;MACpC;IACF;IACA,KAAK,MAAMgG,KAAK,IAAIJ,MAAM,EAAE;MAC1B,IAAI,IAAI,CAACtE,KAAK,CAAC7K,KAAK,CAAC6B,eAAe,CAACwG,IAAI,CAACkH,KAAK,CAAC,EAAE;QAChDF,IAAI,CAACE,KAAK,CAAC5F,IAAI,CAAC,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAI,IAAI,CAACkB,KAAK,CAAC7K,KAAK,CAAC8B,gBAAgB,CAACuG,IAAI,CAACkH,KAAK,CAAC,EAAE;QACxDF,IAAI,CAACE,KAAK,CAAC5F,IAAI,CAAC,QAAQ,CAAC;MAC3B,CAAC,MAAM,IAAI,IAAI,CAACkB,KAAK,CAAC7K,KAAK,CAAC+B,cAAc,CAACsG,IAAI,CAACkH,KAAK,CAAC,EAAE;QACtDF,IAAI,CAACE,KAAK,CAAC5F,IAAI,CAAC,MAAM,CAAC;MACzB,CAAC,MAAM;QACL0F,IAAI,CAACE,KAAK,CAAC5F,IAAI,CAAC,IAAI,CAAC;MACvB;IACF;IACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8F,OAAO,CAAC3F,MAAM,EAAEH,CAAC,EAAE,EAAE;MACvCiG,IAAI,CAACC,MAAM,CAAC3F,IAAI,CAAC;QACftE,IAAI,EAAE6J,OAAO,CAAC9F,CAAC,CAAC;QAChB+B,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAACoH,OAAO,CAAC9F,CAAC,CAAC,CAAC;QACrCkG,MAAM,EAAE,IAAI;QACZC,KAAK,EAAEF,IAAI,CAACE,KAAK,CAACnG,CAAC;MACrB,CAAC,CAAC;IACJ;IACA,KAAK,MAAMR,GAAG,IAAIwG,IAAI,EAAE;MACtBC,IAAI,CAACD,IAAI,CAACzF,IAAI,CAAClB,UAAU,CAACG,GAAG,EAAEyG,IAAI,CAACC,MAAM,CAAC/F,MAAM,CAAC,CAACgC,GAAG,CAAC,CAACiE,IAAI,EAAEpG,CAAC,KAAK;QAClE,OAAO;UACL/D,IAAI,EAAEmK,IAAI;UACVrE,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAAC0H,IAAI,CAAC;UAC/BF,MAAM,EAAE,KAAK;UACbC,KAAK,EAAEF,IAAI,CAACE,KAAK,CAACnG,CAAC;QACrB,CAAC;MACH,CAAC,CAAC,CAAC;IACL;IACA,OAAOiG,IAAI;EACb;EACA/K,QAAQA,CAAC4H,GAAG,EAAE;IACZ,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACtD,QAAQ,CAAChF,IAAI,CAAC4M,GAAG,CAAC;IAC/C,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,SAAS;QACfP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACX6B,KAAK,EAAE7B,GAAG,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;QACvC7E,IAAI,EAAEoF,GAAG,CAAC,CAAC,CAAC;QACZU,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAAC2C,GAAG,CAAC,CAAC,CAAC;MAClC,CAAC;IACH;EACF;EACAzF,SAASA,CAACkH,GAAG,EAAE;IACb,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAAC5C,SAAS,CAAC1F,IAAI,CAAC4M,GAAG,CAAC;IAChD,IAAIzB,GAAG,EAAE;MACP,MAAMpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAACP,MAAM,CAACO,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,GAAGkB,GAAG,CAAC,CAAC,CAAC,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGM,GAAG,CAAC,CAAC,CAAC;MACrF,OAAO;QACLS,IAAI,EAAE,WAAW;QACjBP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI;QACJ8F,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAACzC,IAAI;MAChC,CAAC;IACH;EACF;EACAA,IAAIA,CAAC6G,GAAG,EAAE;IACR,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAACjD,KAAK,CAACvC,IAAI,CAAC/F,IAAI,CAAC4M,GAAG,CAAC;IAC3C,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI,EAAEoF,GAAG,CAAC,CAAC,CAAC;QACZU,MAAM,EAAE,IAAI,CAACW,KAAK,CAAChE,MAAM,CAAC2C,GAAG,CAAC,CAAC,CAAC;MAClC,CAAC;IACH;EACF;EACAhF,MAAMA,CAACyG,GAAG,EAAE;IACV,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACrC,MAAM,CAACnG,IAAI,CAAC4M,GAAG,CAAC;IAC9C,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,QAAQ;QACdP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI,EAAEoF,GAAG,CAAC,CAAC;MACb,CAAC;IACH;EACF;EACA1D,GAAGA,CAACmF,GAAG,EAAE;IACP,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACf,GAAG,CAACzH,IAAI,CAAC4M,GAAG,CAAC;IAC3C,IAAIzB,GAAG,EAAE;MACP,IAAI,CAAC,IAAI,CAACqB,KAAK,CAACf,KAAK,CAACC,MAAM,IAAI,IAAI,CAACH,KAAK,CAAC7K,KAAK,CAACgC,SAAS,CAACqG,IAAI,CAACoC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACvE,IAAI,CAACqB,KAAK,CAACf,KAAK,CAACC,MAAM,GAAG,IAAI;MAChC,CAAC,MAAM,IAAI,IAAI,CAACc,KAAK,CAACf,KAAK,CAACC,MAAM,IAAI,IAAI,CAACH,KAAK,CAAC7K,KAAK,CAACiC,OAAO,CAACoG,IAAI,CAACoC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3E,IAAI,CAACqB,KAAK,CAACf,KAAK,CAACC,MAAM,GAAG,KAAK;MACjC;MACA,IAAI,CAAC,IAAI,CAACc,KAAK,CAACf,KAAK,CAAC0E,UAAU,IAAI,IAAI,CAAC5E,KAAK,CAAC7K,KAAK,CAACkC,iBAAiB,CAACmG,IAAI,CAACoC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACnF,IAAI,CAACqB,KAAK,CAACf,KAAK,CAAC0E,UAAU,GAAG,IAAI;MACpC,CAAC,MAAM,IAAI,IAAI,CAAC3D,KAAK,CAACf,KAAK,CAAC0E,UAAU,IAAI,IAAI,CAAC5E,KAAK,CAAC7K,KAAK,CAACmC,eAAe,CAACkG,IAAI,CAACoC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACvF,IAAI,CAACqB,KAAK,CAACf,KAAK,CAAC0E,UAAU,GAAG,KAAK;MACrC;MACA,OAAO;QACLvE,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXO,MAAM,EAAE,IAAI,CAACc,KAAK,CAACf,KAAK,CAACC,MAAM;QAC/ByE,UAAU,EAAE,IAAI,CAAC3D,KAAK,CAACf,KAAK,CAAC0E,UAAU;QACvC7H,KAAK,EAAE,KAAK;QACZvC,IAAI,EAAEoF,GAAG,CAAC,CAAC;MACb,CAAC;IACH;EACF;EACAxD,IAAIA,CAACiF,GAAG,EAAE;IACR,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACb,IAAI,CAAC3H,IAAI,CAAC4M,GAAG,CAAC;IAC5C,IAAIzB,GAAG,EAAE;MACP,MAAMiF,UAAU,GAAGjF,GAAG,CAAC,CAAC,CAAC,CAACpB,IAAI,CAAC,CAAC;MAChC,IAAI,CAAC,IAAI,CAACwC,OAAO,CAAChN,QAAQ,IAAI,IAAI,CAACgM,KAAK,CAAC7K,KAAK,CAACoC,iBAAiB,CAACiG,IAAI,CAACqH,UAAU,CAAC,EAAE;QACjF,IAAI,CAAC,IAAI,CAAC7E,KAAK,CAAC7K,KAAK,CAACqC,eAAe,CAACgG,IAAI,CAACqH,UAAU,CAAC,EAAE;UACtD;QACF;QACA,MAAMC,UAAU,GAAG/F,KAAK,CAAC8F,UAAU,CAACvF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QACvD,IAAI,CAACuF,UAAU,CAACnG,MAAM,GAAGoG,UAAU,CAACpG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE;UACrD;QACF;MACF,CAAC,MAAM;QACL,MAAMqG,cAAc,GAAGxF,kBAAkB,CAACK,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QACvD,IAAImF,cAAc,KAAK,CAAC,CAAC,EAAE;UACzB;QACF;QACA,IAAIA,cAAc,GAAG,CAAC,CAAC,EAAE;UACvB,MAAMtC,KAAK,GAAG7C,GAAG,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;UAC/C,MAAMuF,OAAO,GAAGvC,KAAK,GAAG7C,GAAG,CAAC,CAAC,CAAC,CAAClB,MAAM,GAAGqG,cAAc;UACtDnF,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACyC,SAAS,CAAC,CAAC,EAAE0C,cAAc,CAAC;UAC5CnF,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACyC,SAAS,CAAC,CAAC,EAAE2C,OAAO,CAAC,CAACxG,IAAI,CAAC,CAAC;UAC5CoB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;QACb;MACF;MACA,IAAIlC,IAAI,GAAGkC,GAAG,CAAC,CAAC,CAAC;MACjB,IAAIK,KAAK,GAAG,EAAE;MACd,IAAI,IAAI,CAACe,OAAO,CAAChN,QAAQ,EAAE;QACzB,MAAM6L,KAAK,GAAG,IAAI,CAACG,KAAK,CAAC7K,KAAK,CAACsC,iBAAiB,CAAChD,IAAI,CAACiJ,IAAI,CAAC;QAC3D,IAAImC,KAAK,EAAE;UACTnC,IAAI,GAAGmC,KAAK,CAAC,CAAC,CAAC;UACfI,KAAK,GAAGJ,KAAK,CAAC,CAAC,CAAC;QAClB;MACF,CAAC,MAAM;QACLI,KAAK,GAAGL,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;MAC3C;MACA5B,IAAI,GAAGA,IAAI,CAACc,IAAI,CAAC,CAAC;MAClB,IAAI,IAAI,CAACwB,KAAK,CAAC7K,KAAK,CAACoC,iBAAiB,CAACiG,IAAI,CAACE,IAAI,CAAC,EAAE;QACjD,IAAI,IAAI,CAACsD,OAAO,CAAChN,QAAQ,IAAI,CAAC,IAAI,CAACgM,KAAK,CAAC7K,KAAK,CAACqC,eAAe,CAACgG,IAAI,CAACqH,UAAU,CAAC,EAAE;UAC/EnH,IAAI,GAAGA,IAAI,CAAC4B,KAAK,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACL5B,IAAI,GAAGA,IAAI,CAAC4B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B;MACF;MACA,OAAOK,UAAU,CAACC,GAAG,EAAE;QACrBlC,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAAC3I,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC/C,MAAM,CAAClB,cAAc,EAAE,IAAI,CAAC,GAAG2B,IAAI;QACxEuC,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAAClL,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC/C,MAAM,CAAClB,cAAc,EAAE,IAAI,CAAC,GAAGkE;MACzE,CAAC,EAAEL,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACqB,KAAK,EAAE,IAAI,CAACjB,KAAK,CAAC;IACpC;EACF;EACA3D,OAAOA,CAACgF,GAAG,EAAE4D,KAAK,EAAE;IAClB,IAAIrF,GAAG;IACP,IAAI,CAACA,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACZ,OAAO,CAAC5H,IAAI,CAAC4M,GAAG,CAAC,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACX,MAAM,CAAC7H,IAAI,CAAC4M,GAAG,CAAC,CAAC,EAAE;MAC7F,MAAM6D,UAAU,GAAG,CAACtF,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,EAAE7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACc,mBAAmB,EAAE,GAAG,CAAC;MACxF,MAAM4J,KAAK,GAAGoF,KAAK,CAACC,UAAU,CAACd,WAAW,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACvE,KAAK,EAAE;QACV,MAAMrF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC,CAAC,CAAC;QAC7B,OAAO;UACLgB,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEtF,IAAI;UACTA;QACF,CAAC;MACH;MACA,OAAOmF,UAAU,CAACC,GAAG,EAAEC,KAAK,EAAED,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACqB,KAAK,EAAE,IAAI,CAACjB,KAAK,CAAC;IAC/D;EACF;EACAmF,QAAQA,CAAC9D,GAAG,EAAE+D,SAAS,EAAEC,QAAQ,GAAG,EAAE,EAAE;IACtC,IAAIrH,KAAK,GAAG,IAAI,CAACgC,KAAK,CAAC/C,MAAM,CAACxB,cAAc,CAAChH,IAAI,CAAC4M,GAAG,CAAC;IACtD,IAAI,CAACrD,KAAK,EAAE;IACZ,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIqH,QAAQ,CAACrH,KAAK,CAAC,IAAI,CAACgC,KAAK,CAAC7K,KAAK,CAACuC,mBAAmB,CAAC,EAAE;IACtE,MAAM4N,QAAQ,GAAGtH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IAC3C,IAAI,CAACsH,QAAQ,IAAI,CAACD,QAAQ,IAAI,IAAI,CAACrF,KAAK,CAAC/C,MAAM,CAAC9B,WAAW,CAAC1G,IAAI,CAAC4Q,QAAQ,CAAC,EAAE;MAC1E,MAAME,OAAO,GAAG,CAAC,GAAGvH,KAAK,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC;MACxC,IAAI8G,MAAM;QAAEC,OAAO;QAAEC,UAAU,GAAGH,OAAO;QAAEI,aAAa,GAAG,CAAC;MAC5D,MAAMC,MAAM,GAAG5H,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAACgC,KAAK,CAAC/C,MAAM,CAACrB,iBAAiB,GAAG,IAAI,CAACoE,KAAK,CAAC/C,MAAM,CAACnB,iBAAiB;MAC9G8J,MAAM,CAACC,SAAS,GAAG,CAAC;MACpBT,SAAS,GAAGA,SAAS,CAAC9F,KAAK,CAAC,CAAC,CAAC,GAAG+B,GAAG,CAAC3C,MAAM,GAAG6G,OAAO,CAAC;MACtD,OAAO,CAACvH,KAAK,GAAG4H,MAAM,CAACnR,IAAI,CAAC2Q,SAAS,CAAC,KAAK,IAAI,EAAE;QAC/CI,MAAM,GAAGxH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;QAC7E,IAAI,CAACwH,MAAM,EAAE;QACbC,OAAO,GAAG,CAAC,GAAGD,MAAM,CAAC,CAAC9G,MAAM;QAC5B,IAAIV,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;UACxB0H,UAAU,IAAID,OAAO;UACrB;QACF,CAAC,MAAM,IAAIzH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;UAC/B,IAAIuH,OAAO,GAAG,CAAC,IAAI,EAAE,CAACA,OAAO,GAAGE,OAAO,IAAI,CAAC,CAAC,EAAE;YAC7CE,aAAa,IAAIF,OAAO;YACxB;UACF;QACF;QACAC,UAAU,IAAID,OAAO;QACrB,IAAIC,UAAU,GAAG,CAAC,EAAE;QACpBD,OAAO,GAAG7M,IAAI,CAACC,GAAG,CAAC4M,OAAO,EAAEA,OAAO,GAAGC,UAAU,GAAGC,aAAa,CAAC;QACjE,MAAMG,cAAc,GAAG,CAAC,GAAG9H,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM;QAC9C,MAAMoB,GAAG,GAAGuB,GAAG,CAAC/B,KAAK,CAAC,CAAC,EAAEiG,OAAO,GAAGvH,KAAK,CAAC+H,KAAK,GAAGD,cAAc,GAAGL,OAAO,CAAC;QAC1E,IAAI7M,IAAI,CAACC,GAAG,CAAC0M,OAAO,EAAEE,OAAO,CAAC,GAAG,CAAC,EAAE;UAClC,MAAMO,KAAK,GAAGlG,GAAG,CAACR,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC9B,OAAO;YACLe,IAAI,EAAE,IAAI;YACVP,GAAG;YACHtF,IAAI,EAAEwL,KAAK;YACX1F,MAAM,EAAE,IAAI,CAACW,KAAK,CAACV,YAAY,CAACyF,KAAK;UACvC,CAAC;QACH;QACA,MAAMxL,IAAI,GAAGsF,GAAG,CAACR,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7B,OAAO;UACLe,IAAI,EAAE,QAAQ;UACdP,GAAG;UACHtF,IAAI;UACJ8F,MAAM,EAAE,IAAI,CAACW,KAAK,CAACV,YAAY,CAAC/F,IAAI;QACtC,CAAC;MACH;IACF;EACF;EACAyL,QAAQA,CAAC5E,GAAG,EAAE;IACZ,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAAC3C,IAAI,CAAC7F,IAAI,CAAC4M,GAAG,CAAC;IAC5C,IAAIzB,GAAG,EAAE;MACP,IAAIpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC,CAAC7K,OAAO,CAAC,IAAI,CAACiL,KAAK,CAAC7K,KAAK,CAACY,iBAAiB,EAAE,GAAG,CAAC;MAClE,MAAMmQ,gBAAgB,GAAG,IAAI,CAAClG,KAAK,CAAC7K,KAAK,CAACW,YAAY,CAAC0H,IAAI,CAAChD,IAAI,CAAC;MACjE,MAAM2L,uBAAuB,GAAG,IAAI,CAACnG,KAAK,CAAC7K,KAAK,CAACS,iBAAiB,CAAC4H,IAAI,CAAChD,IAAI,CAAC,IAAI,IAAI,CAACwF,KAAK,CAAC7K,KAAK,CAACU,eAAe,CAAC2H,IAAI,CAAChD,IAAI,CAAC;MAC5H,IAAI0L,gBAAgB,IAAIC,uBAAuB,EAAE;QAC/C3L,IAAI,GAAGA,IAAI,CAAC6H,SAAS,CAAC,CAAC,EAAE7H,IAAI,CAACkE,MAAM,GAAG,CAAC,CAAC;MAC3C;MACA,OAAO;QACL2B,IAAI,EAAE,UAAU;QAChBP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF;MACF,CAAC;IACH;EACF;EACAM,EAAEA,CAACuG,GAAG,EAAE;IACN,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACnC,EAAE,CAACrG,IAAI,CAAC4M,GAAG,CAAC;IAC1C,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,IAAI;QACVP,GAAG,EAAEF,GAAG,CAAC,CAAC;MACZ,CAAC;IACH;EACF;EACAlD,GAAGA,CAAC2E,GAAG,EAAE;IACP,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACP,GAAG,CAACjI,IAAI,CAAC4M,GAAG,CAAC;IAC3C,IAAIzB,GAAG,EAAE;MACP,OAAO;QACLS,IAAI,EAAE,KAAK;QACXP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI,EAAEoF,GAAG,CAAC,CAAC,CAAC;QACZU,MAAM,EAAE,IAAI,CAACW,KAAK,CAACV,YAAY,CAACX,GAAG,CAAC,CAAC,CAAC;MACxC,CAAC;IACH;EACF;EACA5D,QAAQA,CAACqF,GAAG,EAAE;IACZ,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACjB,QAAQ,CAACvH,IAAI,CAAC4M,GAAG,CAAC;IAChD,IAAIzB,GAAG,EAAE;MACP,IAAIpF,IAAI,EAAEkD,IAAI;MACd,IAAIkC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAClBpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC;QACblC,IAAI,GAAG,SAAS,GAAGlD,IAAI;MACzB,CAAC,MAAM;QACLA,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC;QACblC,IAAI,GAAGlD,IAAI;MACb;MACA,OAAO;QACL6F,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI;QACJkD,IAAI;QACJ4C,MAAM,EAAE,CACN;UACED,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEtF,IAAI;UACTA;QACF,CAAC;MAEL,CAAC;IACH;EACF;EACAmC,GAAGA,CAAC0E,GAAG,EAAE;IACP,IAAIzB,GAAG;IACP,IAAIA,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACN,GAAG,CAAClI,IAAI,CAAC4M,GAAG,CAAC,EAAE;MACzC,IAAI7G,IAAI,EAAEkD,IAAI;MACd,IAAIkC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAClBpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC;QACblC,IAAI,GAAG,SAAS,GAAGlD,IAAI;MACzB,CAAC,MAAM;QACL,IAAI4L,WAAW;QACf,GAAG;UACDA,WAAW,GAAGxG,GAAG,CAAC,CAAC,CAAC;UACpBA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACR,UAAU,CAAChI,IAAI,CAACmL,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;QAC/D,CAAC,QAAQwG,WAAW,KAAKxG,GAAG,CAAC,CAAC,CAAC;QAC/BpF,IAAI,GAAGoF,GAAG,CAAC,CAAC,CAAC;QACb,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;UACrBlC,IAAI,GAAG,SAAS,GAAGkC,GAAG,CAAC,CAAC,CAAC;QAC3B,CAAC,MAAM;UACLlC,IAAI,GAAGkC,GAAG,CAAC,CAAC,CAAC;QACf;MACF;MACA,OAAO;QACLS,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI;QACJkD,IAAI;QACJ4C,MAAM,EAAE,CACN;UACED,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEtF,IAAI;UACTA;QACF,CAAC;MAEL,CAAC;IACH;EACF;EACAO,UAAUA,CAACsG,GAAG,EAAE;IACd,MAAMzB,GAAG,GAAG,IAAI,CAACI,KAAK,CAAC/C,MAAM,CAACzC,IAAI,CAAC/F,IAAI,CAAC4M,GAAG,CAAC;IAC5C,IAAIzB,GAAG,EAAE;MACP,MAAMzB,OAAO,GAAG,IAAI,CAAC8C,KAAK,CAACf,KAAK,CAAC0E,UAAU;MAC3C,OAAO;QACLvE,IAAI,EAAE,MAAM;QACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;QACXpF,IAAI,EAAEoF,GAAG,CAAC,CAAC,CAAC;QACZzB;MACF,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,IAAIkI,MAAM,GAAG,MAAMC,OAAO,CAAC;EACzBhG,MAAM;EACNU,OAAO;EACPd,KAAK;EACL/L,SAAS;EACToS,WAAW;EACXrF,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACb,MAAM,GAAG,EAAE;IAChB,IAAI,CAACA,MAAM,CAAC2E,KAAK,GAAG,eAAgBuB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACvD,IAAI,CAACzF,OAAO,GAAGG,QAAQ,IAAI9M,SAAS;IACpC,IAAI,CAAC2M,OAAO,CAAC7M,SAAS,GAAG,IAAI,CAAC6M,OAAO,CAAC7M,SAAS,IAAI,IAAI4M,UAAU,CAAC,CAAC;IACnE,IAAI,CAAC5M,SAAS,GAAG,IAAI,CAAC6M,OAAO,CAAC7M,SAAS;IACvC,IAAI,CAACA,SAAS,CAAC6M,OAAO,GAAG,IAAI,CAACA,OAAO;IACrC,IAAI,CAAC7M,SAAS,CAAC8M,KAAK,GAAG,IAAI;IAC3B,IAAI,CAACsF,WAAW,GAAG,EAAE;IACrB,IAAI,CAACrG,KAAK,GAAG;MACXC,MAAM,EAAE,KAAK;MACbyE,UAAU,EAAE,KAAK;MACjB7C,GAAG,EAAE;IACP,CAAC;IACD,MAAM/B,KAAK,GAAG;MACZ7K,KAAK;MACL4H,KAAK,EAAEA,KAAK,CAACC,MAAM;MACnBC,MAAM,EAAEA,MAAM,CAACD;IACjB,CAAC;IACD,IAAI,IAAI,CAACgE,OAAO,CAAChN,QAAQ,EAAE;MACzBgM,KAAK,CAACjD,KAAK,GAAGA,KAAK,CAAC/I,QAAQ;MAC5BgM,KAAK,CAAC/C,MAAM,GAAGA,MAAM,CAACjJ,QAAQ;IAChC,CAAC,MAAM,IAAI,IAAI,CAACgN,OAAO,CAAClN,GAAG,EAAE;MAC3BkM,KAAK,CAACjD,KAAK,GAAGA,KAAK,CAACjJ,GAAG;MACvB,IAAI,IAAI,CAACkN,OAAO,CAACpN,MAAM,EAAE;QACvBoM,KAAK,CAAC/C,MAAM,GAAGA,MAAM,CAACrJ,MAAM;MAC9B,CAAC,MAAM;QACLoM,KAAK,CAAC/C,MAAM,GAAGA,MAAM,CAACnJ,GAAG;MAC3B;IACF;IACA,IAAI,CAACK,SAAS,CAAC6L,KAAK,GAAGA,KAAK;EAC9B;EACA;AACF;AACA;EACE,WAAWA,KAAKA,CAAA,EAAG;IACjB,OAAO;MACLjD,KAAK;MACLE;IACF,CAAC;EACH;EACA;AACF;AACA;EACE,OAAOyJ,GAAGA,CAACrF,GAAG,EAAEF,QAAQ,EAAE;IACxB,MAAMpB,MAAM,GAAG,IAAIuG,OAAO,CAACnF,QAAQ,CAAC;IACpC,OAAOpB,MAAM,CAAC2G,GAAG,CAACrF,GAAG,CAAC;EACxB;EACA;AACF;AACA;EACE,OAAOsF,SAASA,CAACtF,GAAG,EAAEF,QAAQ,EAAE;IAC9B,MAAMpB,MAAM,GAAG,IAAIuG,OAAO,CAACnF,QAAQ,CAAC;IACpC,OAAOpB,MAAM,CAACQ,YAAY,CAACc,GAAG,CAAC;EACjC;EACA;AACF;AACA;EACEqF,GAAGA,CAACrF,GAAG,EAAE;IACPA,GAAG,GAAGA,GAAG,CAACtM,OAAO,CAACI,KAAK,CAACiD,cAAc,EAAE,IAAI,CAAC;IAC7C,IAAI,CAAC4J,WAAW,CAACX,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC;IAClC,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACgI,WAAW,CAAC7H,MAAM,EAAEH,CAAC,EAAE,EAAE;MAChD,MAAMqI,IAAI,GAAG,IAAI,CAACL,WAAW,CAAChI,CAAC,CAAC;MAChC,IAAI,CAACgC,YAAY,CAACqG,IAAI,CAACvF,GAAG,EAAEuF,IAAI,CAACtG,MAAM,CAAC;IAC1C;IACA,IAAI,CAACiG,WAAW,GAAG,EAAE;IACrB,OAAO,IAAI,CAACjG,MAAM;EACpB;EACA0B,WAAWA,CAACX,GAAG,EAAEf,MAAM,GAAG,EAAE,EAAEuG,oBAAoB,GAAG,KAAK,EAAE;IAC1D,IAAI,IAAI,CAAC7F,OAAO,CAAChN,QAAQ,EAAE;MACzBqN,GAAG,GAAGA,GAAG,CAACtM,OAAO,CAACI,KAAK,CAACa,aAAa,EAAE,MAAM,CAAC,CAACjB,OAAO,CAACI,KAAK,CAACkD,SAAS,EAAE,EAAE,CAAC;IAC7E;IACA,OAAOgJ,GAAG,EAAE;MACV,IAAIjB,KAAK;MACT,IAAI,IAAI,CAACY,OAAO,CAACnN,UAAU,EAAEkJ,KAAK,EAAEkH,IAAI,CAAE6C,YAAY,IAAK;QACzD,IAAI1G,KAAK,GAAG0G,YAAY,CAACC,IAAI,CAAC;UAAE9F,KAAK,EAAE;QAAK,CAAC,EAAEI,GAAG,EAAEf,MAAM,CAAC,EAAE;UAC3De,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;UACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;UAClB,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC,EAAE;QACF;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACiN,KAAK,CAACC,GAAG,CAAC,EAAE;QACrCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIyB,KAAK,CAACN,GAAG,CAACpB,MAAM,KAAK,CAAC,IAAIuD,SAAS,KAAK,KAAK,CAAC,EAAE;UAClDA,SAAS,CAACnC,GAAG,IAAI,IAAI;QACvB,CAAC,MAAM;UACLQ,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACA;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACmG,IAAI,CAAC+G,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIsD,SAAS,EAAE5B,IAAI,KAAK,WAAW,IAAI4B,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UACjE4B,SAAS,CAACnC,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;UACjCmC,SAAS,CAACzH,IAAI,IAAI,IAAI,GAAG4F,KAAK,CAAC5F,IAAI;UACnC,IAAI,CAAC+L,WAAW,CAAC5H,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC0C,GAAG,GAAGY,SAAS,CAACzH,IAAI;QAC9C,CAAC,MAAM;UACL8F,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACA;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACiF,MAAM,CAACiI,GAAG,CAAC,EAAE;QACtCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACmF,OAAO,CAAC+H,GAAG,CAAC,EAAE;QACvCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACkF,EAAE,CAACgI,GAAG,CAAC,EAAE;QAClCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACiG,UAAU,CAACiH,GAAG,CAAC,EAAE;QAC1CA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC4F,IAAI,CAACsH,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC+F,IAAI,CAACmH,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC2F,GAAG,CAACuH,GAAG,CAAC,EAAE;QACnCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIsD,SAAS,EAAE5B,IAAI,KAAK,WAAW,IAAI4B,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UACjE4B,SAAS,CAACnC,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;UACjCmC,SAAS,CAACzH,IAAI,IAAI,IAAI,GAAG4F,KAAK,CAACN,GAAG;UAClC,IAAI,CAACyG,WAAW,CAAC5H,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC0C,GAAG,GAAGY,SAAS,CAACzH,IAAI;QAC9C,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC8F,MAAM,CAAC2E,KAAK,CAAC7E,KAAK,CAAClE,GAAG,CAAC,EAAE;UACxC,IAAI,CAACoE,MAAM,CAAC2E,KAAK,CAAC7E,KAAK,CAAClE,GAAG,CAAC,GAAG;YAC7BwB,IAAI,EAAE0C,KAAK,CAAC1C,IAAI;YAChBuC,KAAK,EAAEG,KAAK,CAACH;UACf,CAAC;QACH;QACA;MACF;MACA,IAAIG,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACoG,KAAK,CAAC8G,GAAG,CAAC,EAAE;QACrCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACsF,QAAQ,CAAC4H,GAAG,CAAC,EAAE;QACxCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAI4G,MAAM,GAAG3F,GAAG;MAChB,IAAI,IAAI,CAACL,OAAO,CAACnN,UAAU,EAAEoT,UAAU,EAAE;QACvC,IAAIC,UAAU,GAAGC,QAAQ;QACzB,MAAMC,OAAO,GAAG/F,GAAG,CAAC/B,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI+H,SAAS;QACb,IAAI,CAACrG,OAAO,CAACnN,UAAU,CAACoT,UAAU,CAACK,OAAO,CAAEC,aAAa,IAAK;UAC5DF,SAAS,GAAGE,aAAa,CAACR,IAAI,CAAC;YAAE9F,KAAK,EAAE;UAAK,CAAC,EAAEmG,OAAO,CAAC;UACxD,IAAI,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,IAAI,CAAC,EAAE;YACnDH,UAAU,GAAGtO,IAAI,CAACC,GAAG,CAACqO,UAAU,EAAEG,SAAS,CAAC;UAC9C;QACF,CAAC,CAAC;QACF,IAAIH,UAAU,GAAGC,QAAQ,IAAID,UAAU,IAAI,CAAC,EAAE;UAC5CF,MAAM,GAAG3F,GAAG,CAACgB,SAAS,CAAC,CAAC,EAAE6E,UAAU,GAAG,CAAC,CAAC;QAC3C;MACF;MACA,IAAI,IAAI,CAAChH,KAAK,CAAC6B,GAAG,KAAK3B,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACgG,SAAS,CAAC6M,MAAM,CAAC,CAAC,EAAE;QAChE,MAAM/E,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIkI,oBAAoB,IAAI5E,SAAS,EAAE5B,IAAI,KAAK,WAAW,EAAE;UAC3D4B,SAAS,CAACnC,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;UACjCmC,SAAS,CAACzH,IAAI,IAAI,IAAI,GAAG4F,KAAK,CAAC5F,IAAI;UACnC,IAAI,CAAC+L,WAAW,CAAC3H,GAAG,CAAC,CAAC;UACtB,IAAI,CAAC2H,WAAW,CAAC5H,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC0C,GAAG,GAAGY,SAAS,CAACzH,IAAI;QAC9C,CAAC,MAAM;UACL8F,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACAyG,oBAAoB,GAAGG,MAAM,CAACtI,MAAM,KAAK2C,GAAG,CAAC3C,MAAM;QACnD2C,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC;MACF;MACA,IAAI0B,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACqG,IAAI,CAAC6G,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIsD,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UAC9B4B,SAAS,CAACnC,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;UACjCmC,SAAS,CAACzH,IAAI,IAAI,IAAI,GAAG4F,KAAK,CAAC5F,IAAI;UACnC,IAAI,CAAC+L,WAAW,CAAC3H,GAAG,CAAC,CAAC;UACtB,IAAI,CAAC2H,WAAW,CAAC5H,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC0C,GAAG,GAAGY,SAAS,CAACzH,IAAI;QAC9C,CAAC,MAAM;UACL8F,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACA;MACF;MACA,IAAIiB,GAAG,EAAE;QACP,MAAMmG,MAAM,GAAG,yBAAyB,GAAGnG,GAAG,CAACoG,UAAU,CAAC,CAAC,CAAC;QAC5D,IAAI,IAAI,CAACzG,OAAO,CAAC9M,MAAM,EAAE;UACvBwT,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;UACrB;QACF,CAAC,MAAM;UACL,MAAM,IAAII,KAAK,CAACJ,MAAM,CAAC;QACzB;MACF;IACF;IACA,IAAI,CAACtH,KAAK,CAAC6B,GAAG,GAAG,IAAI;IACrB,OAAOzB,MAAM;EACf;EACArD,MAAMA,CAACoE,GAAG,EAAEf,MAAM,GAAG,EAAE,EAAE;IACvB,IAAI,CAACiG,WAAW,CAACzH,IAAI,CAAC;MAAEuC,GAAG;MAAEf;IAAO,CAAC,CAAC;IACtC,OAAOA,MAAM;EACf;EACA;AACF;AACA;EACEC,YAAYA,CAACc,GAAG,EAAEf,MAAM,GAAG,EAAE,EAAE;IAC7B,IAAI8E,SAAS,GAAG/D,GAAG;IACnB,IAAIrD,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACsC,MAAM,CAAC2E,KAAK,EAAE;MACrB,MAAMA,KAAK,GAAGuB,MAAM,CAACqB,IAAI,CAAC,IAAI,CAACvH,MAAM,CAAC2E,KAAK,CAAC;MAC5C,IAAIA,KAAK,CAACvG,MAAM,GAAG,CAAC,EAAE;QACpB,OAAO,CAACV,KAAK,GAAG,IAAI,CAAC7J,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAACV,aAAa,CAAC9H,IAAI,CAAC2Q,SAAS,CAAC,KAAK,IAAI,EAAE;UAClF,IAAIH,KAAK,CAAC6C,QAAQ,CAAC9J,KAAK,CAAC,CAAC,CAAC,CAACsB,KAAK,CAACtB,KAAK,CAAC,CAAC,CAAC,CAAC+J,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;YACrE3C,SAAS,GAAGA,SAAS,CAAC9F,KAAK,CAAC,CAAC,EAAEtB,KAAK,CAAC+H,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC7C,MAAM,CAAClF,KAAK,CAAC,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG0G,SAAS,CAAC9F,KAAK,CAAC,IAAI,CAACnL,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAACV,aAAa,CAACsJ,SAAS,CAAC;UAClK;QACF;MACF;IACF;IACA,OAAO,CAAC7H,KAAK,GAAG,IAAI,CAAC7J,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAAClB,cAAc,CAACtH,IAAI,CAAC2Q,SAAS,CAAC,KAAK,IAAI,EAAE;MACnFA,SAAS,GAAGA,SAAS,CAAC9F,KAAK,CAAC,CAAC,EAAEtB,KAAK,CAAC+H,KAAK,CAAC,GAAG,IAAI,GAAGX,SAAS,CAAC9F,KAAK,CAAC,IAAI,CAACnL,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAAClB,cAAc,CAAC8J,SAAS,CAAC;IAC5H;IACA,OAAO,CAAC7H,KAAK,GAAG,IAAI,CAAC7J,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAAC1B,SAAS,CAAC9G,IAAI,CAAC2Q,SAAS,CAAC,KAAK,IAAI,EAAE;MAC9EA,SAAS,GAAGA,SAAS,CAAC9F,KAAK,CAAC,CAAC,EAAEtB,KAAK,CAAC+H,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC7C,MAAM,CAAClF,KAAK,CAAC,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG0G,SAAS,CAAC9F,KAAK,CAAC,IAAI,CAACnL,SAAS,CAAC6L,KAAK,CAAC/C,MAAM,CAAC1B,SAAS,CAACsK,SAAS,CAAC;IAC9J;IACA,IAAImC,YAAY,GAAG,KAAK;IACxB,IAAI3C,QAAQ,GAAG,EAAE;IACjB,OAAOhE,GAAG,EAAE;MACV,IAAI,CAAC2G,YAAY,EAAE;QACjB3C,QAAQ,GAAG,EAAE;MACf;MACA2C,YAAY,GAAG,KAAK;MACpB,IAAI5H,KAAK;MACT,IAAI,IAAI,CAACY,OAAO,CAACnN,UAAU,EAAEoJ,MAAM,EAAEgH,IAAI,CAAE6C,YAAY,IAAK;QAC1D,IAAI1G,KAAK,GAAG0G,YAAY,CAACC,IAAI,CAAC;UAAE9F,KAAK,EAAE;QAAK,CAAC,EAAEI,GAAG,EAAEf,MAAM,CAAC,EAAE;UAC3De,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;UACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;UAClB,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC,EAAE;QACF;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACyG,MAAM,CAACyG,GAAG,CAAC,EAAE;QACtCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC+H,GAAG,CAACmF,GAAG,CAAC,EAAE;QACnCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACiI,IAAI,CAACiF,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACkI,OAAO,CAACgF,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC2E,KAAK,CAAC,EAAE;QAC1D5D,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,MAAMuD,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIyB,KAAK,CAACC,IAAI,KAAK,MAAM,IAAI4B,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UACvD4B,SAAS,CAACnC,GAAG,IAAIM,KAAK,CAACN,GAAG;UAC1BmC,SAAS,CAACzH,IAAI,IAAI4F,KAAK,CAAC5F,IAAI;QAC9B,CAAC,MAAM;UACL8F,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACA;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACgR,QAAQ,CAAC9D,GAAG,EAAE+D,SAAS,EAAEC,QAAQ,CAAC,EAAE;QAC7DhE,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC8R,QAAQ,CAAC5E,GAAG,CAAC,EAAE;QACxCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC2G,EAAE,CAACuG,GAAG,CAAC,EAAE;QAClCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACuI,GAAG,CAAC2E,GAAG,CAAC,EAAE;QACnCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAIA,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC6H,QAAQ,CAACqF,GAAG,CAAC,EAAE;QACxCA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAI,CAAC,IAAI,CAACF,KAAK,CAACC,MAAM,KAAKC,KAAK,GAAG,IAAI,CAACjM,SAAS,CAACwI,GAAG,CAAC0E,GAAG,CAAC,CAAC,EAAE;QAC3DA,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC4B,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QAClB;MACF;MACA,IAAI4G,MAAM,GAAG3F,GAAG;MAChB,IAAI,IAAI,CAACL,OAAO,CAACnN,UAAU,EAAEoU,WAAW,EAAE;QACxC,IAAIf,UAAU,GAAGC,QAAQ;QACzB,MAAMC,OAAO,GAAG/F,GAAG,CAAC/B,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI+H,SAAS;QACb,IAAI,CAACrG,OAAO,CAACnN,UAAU,CAACoU,WAAW,CAACX,OAAO,CAAEC,aAAa,IAAK;UAC7DF,SAAS,GAAGE,aAAa,CAACR,IAAI,CAAC;YAAE9F,KAAK,EAAE;UAAK,CAAC,EAAEmG,OAAO,CAAC;UACxD,IAAI,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,IAAI,CAAC,EAAE;YACnDH,UAAU,GAAGtO,IAAI,CAACC,GAAG,CAACqO,UAAU,EAAEG,SAAS,CAAC;UAC9C;QACF,CAAC,CAAC;QACF,IAAIH,UAAU,GAAGC,QAAQ,IAAID,UAAU,IAAI,CAAC,EAAE;UAC5CF,MAAM,GAAG3F,GAAG,CAACgB,SAAS,CAAC,CAAC,EAAE6E,UAAU,GAAG,CAAC,CAAC;QAC3C;MACF;MACA,IAAI9G,KAAK,GAAG,IAAI,CAACjM,SAAS,CAAC4G,UAAU,CAACiM,MAAM,CAAC,EAAE;QAC7C3F,GAAG,GAAGA,GAAG,CAACgB,SAAS,CAACjC,KAAK,CAACN,GAAG,CAACpB,MAAM,CAAC;QACrC,IAAI0B,KAAK,CAACN,GAAG,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAC/B+F,QAAQ,GAAGjF,KAAK,CAACN,GAAG,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC;QACA0I,YAAY,GAAG,IAAI;QACnB,MAAM/F,SAAS,GAAG3B,MAAM,CAAC3B,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIsD,SAAS,EAAE5B,IAAI,KAAK,MAAM,EAAE;UAC9B4B,SAAS,CAACnC,GAAG,IAAIM,KAAK,CAACN,GAAG;UAC1BmC,SAAS,CAACzH,IAAI,IAAI4F,KAAK,CAAC5F,IAAI;QAC9B,CAAC,MAAM;UACL8F,MAAM,CAACxB,IAAI,CAACsB,KAAK,CAAC;QACpB;QACA;MACF;MACA,IAAIiB,GAAG,EAAE;QACP,MAAMmG,MAAM,GAAG,yBAAyB,GAAGnG,GAAG,CAACoG,UAAU,CAAC,CAAC,CAAC;QAC5D,IAAI,IAAI,CAACzG,OAAO,CAAC9M,MAAM,EAAE;UACvBwT,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;UACrB;QACF,CAAC,MAAM;UACL,MAAM,IAAII,KAAK,CAACJ,MAAM,CAAC;QACzB;MACF;IACF;IACA,OAAOlH,MAAM;EACf;AACF,CAAC;;AAED;AACA,IAAI4H,SAAS,GAAG,MAAM;EACpBlH,OAAO;EACPmH,MAAM;EACN;EACAjH,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACH,OAAO,GAAGG,QAAQ,IAAI9M,SAAS;EACtC;EACA+M,KAAKA,CAAChB,KAAK,EAAE;IACX,OAAO,EAAE;EACX;EACA9F,IAAIA,CAAC;IAAEE,IAAI;IAAE+G,IAAI;IAAEpD;EAAQ,CAAC,EAAE;IAC5B,MAAMiK,UAAU,GAAG,CAAC7G,IAAI,IAAI,EAAE,EAAEvD,KAAK,CAAC7I,KAAK,CAACmD,aAAa,CAAC,GAAG,CAAC,CAAC;IAC/D,MAAMgC,IAAI,GAAGE,IAAI,CAACzF,OAAO,CAACI,KAAK,CAACoD,aAAa,EAAE,EAAE,CAAC,GAAG,IAAI;IACzD,IAAI,CAAC6P,UAAU,EAAE;MACf,OAAO,aAAa,IAAIjK,OAAO,GAAG7D,IAAI,GAAG+C,OAAO,CAAC/C,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,iBAAiB;IACnF;IACA,OAAO,6BAA6B,GAAG+C,OAAO,CAAC+K,UAAU,CAAC,GAAG,IAAI,IAAIjK,OAAO,GAAG7D,IAAI,GAAG+C,OAAO,CAAC/C,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,iBAAiB;EAChI;EACAF,UAAUA,CAAC;IAAEkG;EAAO,CAAC,EAAE;IACrB,MAAM+H,IAAI,GAAG,IAAI,CAACF,MAAM,CAACG,KAAK,CAAChI,MAAM,CAAC;IACtC,OAAQ;AACZ,EAAE+H,IAAK;AACP,CAAC;EACC;EACAnO,IAAIA,CAAC;IAAEM;EAAK,CAAC,EAAE;IACb,OAAOA,IAAI;EACb;EACAlB,OAAOA,CAAC;IAAEgH,MAAM;IAAEmB;EAAM,CAAC,EAAE;IACzB,OAAQ,KAAIA,KAAM,IAAG,IAAI,CAAC0G,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAE,MAAKmB,KAAM;AACpE,CAAC;EACC;EACApI,EAAEA,CAAC+G,KAAK,EAAE;IACR,OAAO,QAAQ;EACjB;EACArG,IAAIA,CAACqG,KAAK,EAAE;IACV,MAAMoC,OAAO,GAAGpC,KAAK,CAACoC,OAAO;IAC7B,MAAMC,KAAK,GAAGrC,KAAK,CAACqC,KAAK;IACzB,IAAI4F,IAAI,GAAG,EAAE;IACb,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpI,KAAK,CAACuC,KAAK,CAACjE,MAAM,EAAE8J,CAAC,EAAE,EAAE;MAC3C,MAAMhE,IAAI,GAAGpE,KAAK,CAACuC,KAAK,CAAC6F,CAAC,CAAC;MAC3BH,IAAI,IAAI,IAAI,CAACI,QAAQ,CAACjE,IAAI,CAAC;IAC7B;IACA,MAAMnE,IAAI,GAAGmC,OAAO,GAAG,IAAI,GAAG,IAAI;IAClC,MAAMkG,SAAS,GAAGlG,OAAO,IAAIC,KAAK,KAAK,CAAC,GAAG,UAAU,GAAGA,KAAK,GAAG,GAAG,GAAG,EAAE;IACxE,OAAO,GAAG,GAAGpC,IAAI,GAAGqI,SAAS,GAAG,KAAK,GAAGL,IAAI,GAAG,IAAI,GAAGhI,IAAI,GAAG,KAAK;EACpE;EACAoI,QAAQA,CAACjE,IAAI,EAAE;IACb,IAAImE,QAAQ,GAAG,EAAE;IACjB,IAAInE,IAAI,CAACd,IAAI,EAAE;MACb,MAAMkF,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC;QAAEjF,OAAO,EAAE,CAAC,CAACa,IAAI,CAACb;MAAQ,CAAC,CAAC;MAC3D,IAAIa,IAAI,CAAC9B,KAAK,EAAE;QACd,IAAI8B,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,EAAED,IAAI,KAAK,WAAW,EAAE;UACxCmE,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAAC9F,IAAI,GAAGoO,QAAQ,GAAG,GAAG,GAAGpE,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAAC9F,IAAI;UAC1D,IAAIgK,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,IAAIkE,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC5B,MAAM,GAAG,CAAC,IAAI8F,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,MAAM,EAAE;YACzGmE,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC9F,IAAI,GAAGoO,QAAQ,GAAG,GAAG,GAAGvL,OAAO,CAACmH,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC9F,IAAI,CAAC;YACvFgK,IAAI,CAAClE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAACnC,OAAO,GAAG,IAAI;UACzC;QACF,CAAC,MAAM;UACLqG,IAAI,CAAClE,MAAM,CAACuI,OAAO,CAAC;YAClBxI,IAAI,EAAE,MAAM;YACZP,GAAG,EAAE8I,QAAQ,GAAG,GAAG;YACnBpO,IAAI,EAAEoO,QAAQ,GAAG,GAAG;YACpBzK,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLwK,QAAQ,IAAIC,QAAQ,GAAG,GAAG;MAC5B;IACF;IACAD,QAAQ,IAAI,IAAI,CAACR,MAAM,CAACG,KAAK,CAAC9D,IAAI,CAAClE,MAAM,EAAE,CAAC,CAACkE,IAAI,CAAC9B,KAAK,CAAC;IACxD,OAAQ,OAAMiG,QAAS;AAC3B,CAAC;EACC;EACAC,QAAQA,CAAC;IAAEjF;EAAQ,CAAC,EAAE;IACpB,OAAO,SAAS,IAAIA,OAAO,GAAG,aAAa,GAAG,EAAE,CAAC,GAAG,8BAA8B;EACpF;EACAxJ,SAASA,CAAC;IAAEmG;EAAO,CAAC,EAAE;IACpB,OAAQ,MAAK,IAAI,CAAC6H,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAE;AACjD,CAAC;EACC;EACA/F,KAAKA,CAAC6F,KAAK,EAAE;IACX,IAAIqE,MAAM,GAAG,EAAE;IACf,IAAIE,IAAI,GAAG,EAAE;IACb,KAAK,IAAI6D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpI,KAAK,CAACqE,MAAM,CAAC/F,MAAM,EAAE8J,CAAC,EAAE,EAAE;MAC5C7D,IAAI,IAAI,IAAI,CAACmE,SAAS,CAAC1I,KAAK,CAACqE,MAAM,CAAC+D,CAAC,CAAC,CAAC;IACzC;IACA/D,MAAM,IAAI,IAAI,CAACsE,QAAQ,CAAC;MAAEvO,IAAI,EAAEmK;IAAK,CAAC,CAAC;IACvC,IAAI0D,IAAI,GAAG,EAAE;IACb,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpI,KAAK,CAACmE,IAAI,CAAC7F,MAAM,EAAE8J,CAAC,EAAE,EAAE;MAC1C,MAAMzK,GAAG,GAAGqC,KAAK,CAACmE,IAAI,CAACiE,CAAC,CAAC;MACzB7D,IAAI,GAAG,EAAE;MACT,KAAK,IAAIqE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjL,GAAG,CAACW,MAAM,EAAEsK,CAAC,EAAE,EAAE;QACnCrE,IAAI,IAAI,IAAI,CAACmE,SAAS,CAAC/K,GAAG,CAACiL,CAAC,CAAC,CAAC;MAChC;MACAX,IAAI,IAAI,IAAI,CAACU,QAAQ,CAAC;QAAEvO,IAAI,EAAEmK;MAAK,CAAC,CAAC;IACvC;IACA,IAAI0D,IAAI,EAAEA,IAAI,GAAI,UAASA,IAAK,UAAS;IACzC,OAAO,oBAAoB,GAAG5D,MAAM,GAAG,YAAY,GAAG4D,IAAI,GAAG,YAAY;EAC3E;EACAU,QAAQA,CAAC;IAAEvO;EAAK,CAAC,EAAE;IACjB,OAAQ;AACZ,EAAEA,IAAK;AACP,CAAC;EACC;EACAsO,SAASA,CAAC1I,KAAK,EAAE;IACf,MAAM6I,OAAO,GAAG,IAAI,CAACd,MAAM,CAACI,WAAW,CAACnI,KAAK,CAACE,MAAM,CAAC;IACrD,MAAMD,IAAI,GAAGD,KAAK,CAACqE,MAAM,GAAG,IAAI,GAAG,IAAI;IACvC,MAAMN,IAAI,GAAG/D,KAAK,CAACsE,KAAK,GAAI,IAAGrE,IAAK,WAAUD,KAAK,CAACsE,KAAM,IAAG,GAAI,IAAGrE,IAAK,GAAE;IAC3E,OAAO8D,IAAI,GAAG8E,OAAO,GAAI,KAAI5I,IAAK;AACtC,CAAC;EACC;EACA;AACF;AACA;EACE6I,MAAMA,CAAC;IAAE5I;EAAO,CAAC,EAAE;IACjB,OAAQ,WAAU,IAAI,CAAC6H,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAE,WAAU;EAC9D;EACA6I,EAAEA,CAAC;IAAE7I;EAAO,CAAC,EAAE;IACb,OAAQ,OAAM,IAAI,CAAC6H,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAE,OAAM;EACtD;EACA2F,QAAQA,CAAC;IAAEzL;EAAK,CAAC,EAAE;IACjB,OAAQ,SAAQ6C,OAAO,CAAC7C,IAAI,EAAE,IAAI,CAAE,SAAQ;EAC9C;EACAM,EAAEA,CAACsF,KAAK,EAAE;IACR,OAAO,MAAM;EACf;EACA1D,GAAGA,CAAC;IAAE4D;EAAO,CAAC,EAAE;IACd,OAAQ,QAAO,IAAI,CAAC6H,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAE,QAAO;EACxD;EACAlE,IAAIA,CAAC;IAAEsB,IAAI;IAAEuC,KAAK;IAAEK;EAAO,CAAC,EAAE;IAC5B,MAAM9F,IAAI,GAAG,IAAI,CAAC2N,MAAM,CAACI,WAAW,CAACjI,MAAM,CAAC;IAC5C,MAAM8I,SAAS,GAAG3L,QAAQ,CAACC,IAAI,CAAC;IAChC,IAAI0L,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO5O,IAAI;IACb;IACAkD,IAAI,GAAG0L,SAAS;IAChB,IAAIC,GAAG,GAAG,WAAW,GAAG3L,IAAI,GAAG,GAAG;IAClC,IAAIuC,KAAK,EAAE;MACToJ,GAAG,IAAI,UAAU,GAAGhM,OAAO,CAAC4C,KAAK,CAAC,GAAG,GAAG;IAC1C;IACAoJ,GAAG,IAAI,GAAG,GAAG7O,IAAI,GAAG,MAAM;IAC1B,OAAO6O,GAAG;EACZ;EACAC,KAAKA,CAAC;IAAE5L,IAAI;IAAEuC,KAAK;IAAEzF,IAAI;IAAE8F;EAAO,CAAC,EAAE;IACnC,IAAIA,MAAM,EAAE;MACV9F,IAAI,GAAG,IAAI,CAAC2N,MAAM,CAACI,WAAW,CAACjI,MAAM,EAAE,IAAI,CAAC6H,MAAM,CAACoB,YAAY,CAAC;IAClE;IACA,MAAMH,SAAS,GAAG3L,QAAQ,CAACC,IAAI,CAAC;IAChC,IAAI0L,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO/L,OAAO,CAAC7C,IAAI,CAAC;IACtB;IACAkD,IAAI,GAAG0L,SAAS;IAChB,IAAIC,GAAG,GAAI,aAAY3L,IAAK,UAASlD,IAAK,GAAE;IAC5C,IAAIyF,KAAK,EAAE;MACToJ,GAAG,IAAK,WAAUhM,OAAO,CAAC4C,KAAK,CAAE,GAAE;IACrC;IACAoJ,GAAG,IAAI,GAAG;IACV,OAAOA,GAAG;EACZ;EACA7O,IAAIA,CAAC4F,KAAK,EAAE;IACV,OAAO,QAAQ,IAAIA,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,IAAI,CAAC6H,MAAM,CAACI,WAAW,CAACnI,KAAK,CAACE,MAAM,CAAC,GAAG,SAAS,IAAIF,KAAK,IAAIA,KAAK,CAACjC,OAAO,GAAGiC,KAAK,CAAC5F,IAAI,GAAG6C,OAAO,CAAC+C,KAAK,CAAC5F,IAAI,CAAC;EAC3J;AACF,CAAC;;AAED;AACA,IAAIgP,aAAa,GAAG,MAAM;EACxB;EACAN,MAAMA,CAAC;IAAE1O;EAAK,CAAC,EAAE;IACf,OAAOA,IAAI;EACb;EACA2O,EAAEA,CAAC;IAAE3O;EAAK,CAAC,EAAE;IACX,OAAOA,IAAI;EACb;EACAyL,QAAQA,CAAC;IAAEzL;EAAK,CAAC,EAAE;IACjB,OAAOA,IAAI;EACb;EACAkC,GAAGA,CAAC;IAAElC;EAAK,CAAC,EAAE;IACZ,OAAOA,IAAI;EACb;EACAN,IAAIA,CAAC;IAAEM;EAAK,CAAC,EAAE;IACb,OAAOA,IAAI;EACb;EACAA,IAAIA,CAAC;IAAEA;EAAK,CAAC,EAAE;IACb,OAAOA,IAAI;EACb;EACA4B,IAAIA,CAAC;IAAE5B;EAAK,CAAC,EAAE;IACb,OAAO,EAAE,GAAGA,IAAI;EAClB;EACA8O,KAAKA,CAAC;IAAE9O;EAAK,CAAC,EAAE;IACd,OAAO,EAAE,GAAGA,IAAI;EAClB;EACAM,EAAEA,CAAA,EAAG;IACH,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,IAAI2O,OAAO,GAAG,MAAMC,QAAQ,CAAC;EAC3B1I,OAAO;EACP/M,QAAQ;EACRsV,YAAY;EACZrI,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACH,OAAO,GAAGG,QAAQ,IAAI9M,SAAS;IACpC,IAAI,CAAC2M,OAAO,CAAC/M,QAAQ,GAAG,IAAI,CAAC+M,OAAO,CAAC/M,QAAQ,IAAI,IAAIiU,SAAS,CAAC,CAAC;IAChE,IAAI,CAACjU,QAAQ,GAAG,IAAI,CAAC+M,OAAO,CAAC/M,QAAQ;IACrC,IAAI,CAACA,QAAQ,CAAC+M,OAAO,GAAG,IAAI,CAACA,OAAO;IACpC,IAAI,CAAC/M,QAAQ,CAACkU,MAAM,GAAG,IAAI;IAC3B,IAAI,CAACoB,YAAY,GAAG,IAAIC,aAAa,CAAC,CAAC;EACzC;EACA;AACF;AACA;EACE,OAAOlB,KAAKA,CAAChI,MAAM,EAAEa,QAAQ,EAAE;IAC7B,MAAMwI,OAAO,GAAG,IAAID,QAAQ,CAACvI,QAAQ,CAAC;IACtC,OAAOwI,OAAO,CAACrB,KAAK,CAAChI,MAAM,CAAC;EAC9B;EACA;AACF;AACA;EACE,OAAOiI,WAAWA,CAACjI,MAAM,EAAEa,QAAQ,EAAE;IACnC,MAAMwI,OAAO,GAAG,IAAID,QAAQ,CAACvI,QAAQ,CAAC;IACtC,OAAOwI,OAAO,CAACpB,WAAW,CAACjI,MAAM,CAAC;EACpC;EACA;AACF;AACA;EACEgI,KAAKA,CAAChI,MAAM,EAAEyB,GAAG,GAAG,IAAI,EAAE;IACxB,IAAIsH,GAAG,GAAG,EAAE;IACZ,KAAK,IAAI9K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC5B,MAAM,EAAEH,CAAC,EAAE,EAAE;MACtC,MAAMqL,QAAQ,GAAGtJ,MAAM,CAAC/B,CAAC,CAAC;MAC1B,IAAI,IAAI,CAACyC,OAAO,CAACnN,UAAU,EAAEgW,SAAS,GAAGD,QAAQ,CAACvJ,IAAI,CAAC,EAAE;QACvD,MAAMyJ,YAAY,GAAGF,QAAQ;QAC7B,MAAMG,GAAG,GAAG,IAAI,CAAC/I,OAAO,CAACnN,UAAU,CAACgW,SAAS,CAACC,YAAY,CAACzJ,IAAI,CAAC,CAAC0G,IAAI,CAAC;UAAEoB,MAAM,EAAE;QAAK,CAAC,EAAE2B,YAAY,CAAC;QACrG,IAAIC,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,CAACjC,QAAQ,CAACgC,YAAY,CAACzJ,IAAI,CAAC,EAAE;UAChJgJ,GAAG,IAAIU,GAAG,IAAI,EAAE;UAChB;QACF;MACF;MACA,MAAM3J,KAAK,GAAGwJ,QAAQ;MACtB,QAAQxJ,KAAK,CAACC,IAAI;QAChB,KAAK,OAAO;UAAE;YACZgJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACmN,KAAK,CAAChB,KAAK,CAAC;YACjC;UACF;QACA,KAAK,IAAI;UAAE;YACTiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACoF,EAAE,CAAC+G,KAAK,CAAC;YAC9B;UACF;QACA,KAAK,SAAS;UAAE;YACdiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACqF,OAAO,CAAC8G,KAAK,CAAC;YACnC;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACqG,IAAI,CAAC8F,KAAK,CAAC;YAChC;UACF;QACA,KAAK,OAAO;UAAE;YACZiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACsG,KAAK,CAAC6F,KAAK,CAAC;YACjC;UACF;QACA,KAAK,YAAY;UAAE;YACjBiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACmG,UAAU,CAACgG,KAAK,CAAC;YACtC;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAAC8F,IAAI,CAACqG,KAAK,CAAC;YAChC;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACiG,IAAI,CAACkG,KAAK,CAAC;YAChC;UACF;QACA,KAAK,WAAW;UAAE;YAChBiJ,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACkG,SAAS,CAACiG,KAAK,CAAC;YACrC;UACF;QACA,KAAK,MAAM;UAAE;YACX,IAAI4J,SAAS,GAAG5J,KAAK;YACrB,IAAIiI,IAAI,GAAG,IAAI,CAACpU,QAAQ,CAACuG,IAAI,CAACwP,SAAS,CAAC;YACxC,OAAOzL,CAAC,GAAG,CAAC,GAAG+B,MAAM,CAAC5B,MAAM,IAAI4B,MAAM,CAAC/B,CAAC,GAAG,CAAC,CAAC,CAAC8B,IAAI,KAAK,MAAM,EAAE;cAC7D2J,SAAS,GAAG1J,MAAM,CAAC,EAAE/B,CAAC,CAAC;cACvB8J,IAAI,IAAI,IAAI,GAAG,IAAI,CAACpU,QAAQ,CAACuG,IAAI,CAACwP,SAAS,CAAC;YAC9C;YACA,IAAIjI,GAAG,EAAE;cACPsH,GAAG,IAAI,IAAI,CAACpV,QAAQ,CAACkG,SAAS,CAAC;gBAC7BkG,IAAI,EAAE,WAAW;gBACjBP,GAAG,EAAEuI,IAAI;gBACT7N,IAAI,EAAE6N,IAAI;gBACV/H,MAAM,EAAE,CAAC;kBAAED,IAAI,EAAE,MAAM;kBAAEP,GAAG,EAAEuI,IAAI;kBAAE7N,IAAI,EAAE6N,IAAI;kBAAElK,OAAO,EAAE;gBAAK,CAAC;cACjE,CAAC,CAAC;YACJ,CAAC,MAAM;cACLkL,GAAG,IAAIhB,IAAI;YACb;YACA;UACF;QACA;UAAS;YACP,MAAMb,MAAM,GAAG,cAAc,GAAGpH,KAAK,CAACC,IAAI,GAAG,uBAAuB;YACpE,IAAI,IAAI,CAACW,OAAO,CAAC9M,MAAM,EAAE;cACvBwT,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;cACrB,OAAO,EAAE;YACX,CAAC,MAAM;cACL,MAAM,IAAII,KAAK,CAACJ,MAAM,CAAC;YACzB;UACF;MACF;IACF;IACA,OAAO6B,GAAG;EACZ;EACA;AACF;AACA;EACEd,WAAWA,CAACjI,MAAM,EAAErM,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IAC5C,IAAIoV,GAAG,GAAG,EAAE;IACZ,KAAK,IAAI9K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC5B,MAAM,EAAEH,CAAC,EAAE,EAAE;MACtC,MAAMqL,QAAQ,GAAGtJ,MAAM,CAAC/B,CAAC,CAAC;MAC1B,IAAI,IAAI,CAACyC,OAAO,CAACnN,UAAU,EAAEgW,SAAS,GAAGD,QAAQ,CAACvJ,IAAI,CAAC,EAAE;QACvD,MAAM0J,GAAG,GAAG,IAAI,CAAC/I,OAAO,CAACnN,UAAU,CAACgW,SAAS,CAACD,QAAQ,CAACvJ,IAAI,CAAC,CAAC0G,IAAI,CAAC;UAAEoB,MAAM,EAAE;QAAK,CAAC,EAAEyB,QAAQ,CAAC;QAC7F,IAAIG,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAACjC,QAAQ,CAAC8B,QAAQ,CAACvJ,IAAI,CAAC,EAAE;UAClIgJ,GAAG,IAAIU,GAAG,IAAI,EAAE;UAChB;QACF;MACF;MACA,MAAM3J,KAAK,GAAGwJ,QAAQ;MACtB,QAAQxJ,KAAK,CAACC,IAAI;QAChB,KAAK,QAAQ;UAAE;YACbgJ,GAAG,IAAIpV,QAAQ,CAACuG,IAAI,CAAC4F,KAAK,CAAC;YAC3B;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAIpV,QAAQ,CAACiG,IAAI,CAACkG,KAAK,CAAC;YAC3B;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAIpV,QAAQ,CAACmI,IAAI,CAACgE,KAAK,CAAC;YAC3B;UACF;QACA,KAAK,OAAO;UAAE;YACZiJ,GAAG,IAAIpV,QAAQ,CAACqV,KAAK,CAAClJ,KAAK,CAAC;YAC5B;UACF;QACA,KAAK,QAAQ;UAAE;YACbiJ,GAAG,IAAIpV,QAAQ,CAACiV,MAAM,CAAC9I,KAAK,CAAC;YAC7B;UACF;QACA,KAAK,IAAI;UAAE;YACTiJ,GAAG,IAAIpV,QAAQ,CAACkV,EAAE,CAAC/I,KAAK,CAAC;YACzB;UACF;QACA,KAAK,UAAU;UAAE;YACfiJ,GAAG,IAAIpV,QAAQ,CAACgS,QAAQ,CAAC7F,KAAK,CAAC;YAC/B;UACF;QACA,KAAK,IAAI;UAAE;YACTiJ,GAAG,IAAIpV,QAAQ,CAAC6G,EAAE,CAACsF,KAAK,CAAC;YACzB;UACF;QACA,KAAK,KAAK;UAAE;YACViJ,GAAG,IAAIpV,QAAQ,CAACyI,GAAG,CAAC0D,KAAK,CAAC;YAC1B;UACF;QACA,KAAK,MAAM;UAAE;YACXiJ,GAAG,IAAIpV,QAAQ,CAACuG,IAAI,CAAC4F,KAAK,CAAC;YAC3B;UACF;QACA;UAAS;YACP,MAAMoH,MAAM,GAAG,cAAc,GAAGpH,KAAK,CAACC,IAAI,GAAG,uBAAuB;YACpE,IAAI,IAAI,CAACW,OAAO,CAAC9M,MAAM,EAAE;cACvBwT,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;cACrB,OAAO,EAAE;YACX,CAAC,MAAM;cACL,MAAM,IAAII,KAAK,CAACJ,MAAM,CAAC;YACzB;UACF;MACF;IACF;IACA,OAAO6B,GAAG;EACZ;AACF,CAAC;;AAED;AACA,IAAIY,MAAM,GAAG,MAAM;EACjBjJ,OAAO;EACPjE,KAAK;EACLmE,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACH,OAAO,GAAGG,QAAQ,IAAI9M,SAAS;EACtC;EACA,OAAO6V,gBAAgB,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAChD,YAAY,EACZ,aAAa,EACb,kBAAkB,CACnB,CAAC;EACF;AACF;AACA;EACEC,UAAUA,CAACC,QAAQ,EAAE;IACnB,OAAOA,QAAQ;EACjB;EACA;AACF;AACA;EACEC,WAAWA,CAAChN,KAAK,EAAE;IACjB,OAAOA,KAAK;EACd;EACA;AACF;AACA;EACEiN,gBAAgBA,CAACjK,MAAM,EAAE;IACvB,OAAOA,MAAM;EACf;EACA;AACF;AACA;EACEkK,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACzN,KAAK,GAAGsJ,MAAM,CAACK,GAAG,GAAGL,MAAM,CAACM,SAAS;EACnD;EACA;AACF;AACA;EACE8D,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC1N,KAAK,GAAG0M,OAAO,CAACnB,KAAK,GAAGmB,OAAO,CAAClB,WAAW;EACzD;AACF,CAAC;;AAED;AACA,IAAImC,MAAM,GAAG,MAAM;EACjBC,QAAQ,GAAGjX,YAAY,CAAC,CAAC;EACzBsN,OAAO,GAAG,IAAI,CAAC4J,UAAU;EACzBtC,KAAK,GAAG,IAAI,CAACuC,aAAa,CAAC,IAAI,CAAC;EAChCtC,WAAW,GAAG,IAAI,CAACsC,aAAa,CAAC,KAAK,CAAC;EACvCC,MAAM,GAAGrB,OAAO;EAChBsB,QAAQ,GAAG7C,SAAS;EACpB8C,YAAY,GAAGxB,aAAa;EAC5ByB,KAAK,GAAG5E,MAAM;EACd6E,SAAS,GAAGnK,UAAU;EACtBoK,KAAK,GAAGlB,MAAM;EACd/I,WAAWA,CAAC,GAAGkK,IAAI,EAAE;IACnB,IAAI,CAACC,GAAG,CAAC,GAAGD,IAAI,CAAC;EACnB;EACA;AACF;AACA;EACEhX,UAAUA,CAACkM,MAAM,EAAEgL,QAAQ,EAAE;IAC3B,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,MAAMnL,KAAK,IAAIE,MAAM,EAAE;MAC1BiL,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACF,QAAQ,CAACvE,IAAI,CAAC,IAAI,EAAE3G,KAAK,CAAC,CAAC;MAClD,QAAQA,KAAK,CAACC,IAAI;QAChB,KAAK,OAAO;UAAE;YACZ,MAAMoL,UAAU,GAAGrL,KAAK;YACxB,KAAK,MAAMuE,IAAI,IAAI8G,UAAU,CAAChH,MAAM,EAAE;cACpC8G,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpX,UAAU,CAACuQ,IAAI,CAACrE,MAAM,EAAEgL,QAAQ,CAAC,CAAC;YAChE;YACA,KAAK,MAAMvN,GAAG,IAAI0N,UAAU,CAAClH,IAAI,EAAE;cACjC,KAAK,MAAMI,IAAI,IAAI5G,GAAG,EAAE;gBACtBwN,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpX,UAAU,CAACuQ,IAAI,CAACrE,MAAM,EAAEgL,QAAQ,CAAC,CAAC;cAChE;YACF;YACA;UACF;QACA,KAAK,MAAM;UAAE;YACX,MAAMI,SAAS,GAAGtL,KAAK;YACvBmL,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpX,UAAU,CAACsX,SAAS,CAAC/I,KAAK,EAAE2I,QAAQ,CAAC,CAAC;YAClE;UACF;QACA;UAAS;YACP,MAAMxB,YAAY,GAAG1J,KAAK;YAC1B,IAAI,IAAI,CAACuK,QAAQ,CAAC9W,UAAU,EAAE8X,WAAW,GAAG7B,YAAY,CAACzJ,IAAI,CAAC,EAAE;cAC9D,IAAI,CAACsK,QAAQ,CAAC9W,UAAU,CAAC8X,WAAW,CAAC7B,YAAY,CAACzJ,IAAI,CAAC,CAACiH,OAAO,CAAEqE,WAAW,IAAK;gBAC/E,MAAMC,OAAO,GAAG9B,YAAY,CAAC6B,WAAW,CAAC,CAACE,IAAI,CAAC1E,QAAQ,CAAC;gBACxDoE,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpX,UAAU,CAACwX,OAAO,EAAEN,QAAQ,CAAC,CAAC;cAC5D,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIxB,YAAY,CAACxJ,MAAM,EAAE;cAC9BiL,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpX,UAAU,CAAC0V,YAAY,CAACxJ,MAAM,EAAEgL,QAAQ,CAAC,CAAC;YACxE;UACF;MACF;IACF;IACA,OAAOC,MAAM;EACf;EACAF,GAAGA,CAAC,GAAGD,IAAI,EAAE;IACX,MAAMvX,UAAU,GAAG,IAAI,CAAC8W,QAAQ,CAAC9W,UAAU,IAAI;MAAEgW,SAAS,EAAE,CAAC,CAAC;MAAE8B,WAAW,EAAE,CAAC;IAAE,CAAC;IACjFP,IAAI,CAAC9D,OAAO,CAAEwE,IAAI,IAAK;MACrB,MAAMC,IAAI,GAAG;QAAE,GAAGD;MAAK,CAAC;MACxBC,IAAI,CAACpY,KAAK,GAAG,IAAI,CAACgX,QAAQ,CAAChX,KAAK,IAAIoY,IAAI,CAACpY,KAAK,IAAI,KAAK;MACvD,IAAImY,IAAI,CAACjY,UAAU,EAAE;QACnBiY,IAAI,CAACjY,UAAU,CAACyT,OAAO,CAAE0E,GAAG,IAAK;UAC/B,IAAI,CAACA,GAAG,CAAChX,IAAI,EAAE;YACb,MAAM,IAAI4S,KAAK,CAAC,yBAAyB,CAAC;UAC5C;UACA,IAAI,UAAU,IAAIoE,GAAG,EAAE;YACrB,MAAMC,YAAY,GAAGpY,UAAU,CAACgW,SAAS,CAACmC,GAAG,CAAChX,IAAI,CAAC;YACnD,IAAIiX,YAAY,EAAE;cAChBpY,UAAU,CAACgW,SAAS,CAACmC,GAAG,CAAChX,IAAI,CAAC,GAAG,UAAS,GAAGkX,KAAK,EAAE;gBAClD,IAAInC,GAAG,GAAGiC,GAAG,CAAC/X,QAAQ,CAACkY,KAAK,CAAC,IAAI,EAAED,KAAK,CAAC;gBACzC,IAAInC,GAAG,KAAK,KAAK,EAAE;kBACjBA,GAAG,GAAGkC,YAAY,CAACE,KAAK,CAAC,IAAI,EAAED,KAAK,CAAC;gBACvC;gBACA,OAAOnC,GAAG;cACZ,CAAC;YACH,CAAC,MAAM;cACLlW,UAAU,CAACgW,SAAS,CAACmC,GAAG,CAAChX,IAAI,CAAC,GAAGgX,GAAG,CAAC/X,QAAQ;YAC/C;UACF;UACA,IAAI,WAAW,IAAI+X,GAAG,EAAE;YACtB,IAAI,CAACA,GAAG,CAACtM,KAAK,IAAIsM,GAAG,CAACtM,KAAK,KAAK,OAAO,IAAIsM,GAAG,CAACtM,KAAK,KAAK,QAAQ,EAAE;cACjE,MAAM,IAAIkI,KAAK,CAAC,6CAA6C,CAAC;YAChE;YACA,MAAMwE,QAAQ,GAAGvY,UAAU,CAACmY,GAAG,CAACtM,KAAK,CAAC;YACtC,IAAI0M,QAAQ,EAAE;cACZA,QAAQ,CAACvD,OAAO,CAACmD,GAAG,CAAC7X,SAAS,CAAC;YACjC,CAAC,MAAM;cACLN,UAAU,CAACmY,GAAG,CAACtM,KAAK,CAAC,GAAG,CAACsM,GAAG,CAAC7X,SAAS,CAAC;YACzC;YACA,IAAI6X,GAAG,CAACvJ,KAAK,EAAE;cACb,IAAIuJ,GAAG,CAACtM,KAAK,KAAK,OAAO,EAAE;gBACzB,IAAI7L,UAAU,CAACoT,UAAU,EAAE;kBACzBpT,UAAU,CAACoT,UAAU,CAACnI,IAAI,CAACkN,GAAG,CAACvJ,KAAK,CAAC;gBACvC,CAAC,MAAM;kBACL5O,UAAU,CAACoT,UAAU,GAAG,CAAC+E,GAAG,CAACvJ,KAAK,CAAC;gBACrC;cACF,CAAC,MAAM,IAAIuJ,GAAG,CAACtM,KAAK,KAAK,QAAQ,EAAE;gBACjC,IAAI7L,UAAU,CAACoU,WAAW,EAAE;kBAC1BpU,UAAU,CAACoU,WAAW,CAACnJ,IAAI,CAACkN,GAAG,CAACvJ,KAAK,CAAC;gBACxC,CAAC,MAAM;kBACL5O,UAAU,CAACoU,WAAW,GAAG,CAAC+D,GAAG,CAACvJ,KAAK,CAAC;gBACtC;cACF;YACF;UACF;UACA,IAAI,aAAa,IAAIuJ,GAAG,IAAIA,GAAG,CAACL,WAAW,EAAE;YAC3C9X,UAAU,CAAC8X,WAAW,CAACK,GAAG,CAAChX,IAAI,CAAC,GAAGgX,GAAG,CAACL,WAAW;UACpD;QACF,CAAC,CAAC;QACFI,IAAI,CAAClY,UAAU,GAAGA,UAAU;MAC9B;MACA,IAAIiY,IAAI,CAAC7X,QAAQ,EAAE;QACjB,MAAMA,QAAQ,GAAG,IAAI,CAAC0W,QAAQ,CAAC1W,QAAQ,IAAI,IAAIiU,SAAS,CAAC,IAAI,CAACyC,QAAQ,CAAC;QACvE,KAAK,MAAM0B,IAAI,IAAIP,IAAI,CAAC7X,QAAQ,EAAE;UAChC,IAAI,EAAEoY,IAAI,IAAIpY,QAAQ,CAAC,EAAE;YACvB,MAAM,IAAI2T,KAAK,CAAE,aAAYyE,IAAK,kBAAiB,CAAC;UACtD;UACA,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAACvE,QAAQ,CAACuE,IAAI,CAAC,EAAE;YACxC;UACF;UACA,MAAMC,YAAY,GAAGD,IAAI;UACzB,MAAME,YAAY,GAAGT,IAAI,CAAC7X,QAAQ,CAACqY,YAAY,CAAC;UAChD,MAAML,YAAY,GAAGhY,QAAQ,CAACqY,YAAY,CAAC;UAC3CrY,QAAQ,CAACqY,YAAY,CAAC,GAAG,CAAC,GAAGJ,KAAK,KAAK;YACrC,IAAInC,GAAG,GAAGwC,YAAY,CAACJ,KAAK,CAAClY,QAAQ,EAAEiY,KAAK,CAAC;YAC7C,IAAInC,GAAG,KAAK,KAAK,EAAE;cACjBA,GAAG,GAAGkC,YAAY,CAACE,KAAK,CAAClY,QAAQ,EAAEiY,KAAK,CAAC;YAC3C;YACA,OAAOnC,GAAG,IAAI,EAAE;UAClB,CAAC;QACH;QACAgC,IAAI,CAAC9X,QAAQ,GAAGA,QAAQ;MAC1B;MACA,IAAI6X,IAAI,CAAC3X,SAAS,EAAE;QAClB,MAAMA,SAAS,GAAG,IAAI,CAACwW,QAAQ,CAACxW,SAAS,IAAI,IAAI4M,UAAU,CAAC,IAAI,CAAC4J,QAAQ,CAAC;QAC1E,KAAK,MAAM0B,IAAI,IAAIP,IAAI,CAAC3X,SAAS,EAAE;UACjC,IAAI,EAAEkY,IAAI,IAAIlY,SAAS,CAAC,EAAE;YACxB,MAAM,IAAIyT,KAAK,CAAE,cAAayE,IAAK,kBAAiB,CAAC;UACvD;UACA,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAACvE,QAAQ,CAACuE,IAAI,CAAC,EAAE;YAChD;UACF;UACA,MAAMG,aAAa,GAAGH,IAAI;UAC1B,MAAMI,aAAa,GAAGX,IAAI,CAAC3X,SAAS,CAACqY,aAAa,CAAC;UACnD,MAAME,aAAa,GAAGvY,SAAS,CAACqY,aAAa,CAAC;UAC9CrY,SAAS,CAACqY,aAAa,CAAC,GAAG,CAAC,GAAGN,KAAK,KAAK;YACvC,IAAInC,GAAG,GAAG0C,aAAa,CAACN,KAAK,CAAChY,SAAS,EAAE+X,KAAK,CAAC;YAC/C,IAAInC,GAAG,KAAK,KAAK,EAAE;cACjBA,GAAG,GAAG2C,aAAa,CAACP,KAAK,CAAChY,SAAS,EAAE+X,KAAK,CAAC;YAC7C;YACA,OAAOnC,GAAG;UACZ,CAAC;QACH;QACAgC,IAAI,CAAC5X,SAAS,GAAGA,SAAS;MAC5B;MACA,IAAI2X,IAAI,CAAC/X,KAAK,EAAE;QACd,MAAMA,KAAK,GAAG,IAAI,CAAC4W,QAAQ,CAAC5W,KAAK,IAAI,IAAIkW,MAAM,CAAC,CAAC;QACjD,KAAK,MAAMoC,IAAI,IAAIP,IAAI,CAAC/X,KAAK,EAAE;UAC7B,IAAI,EAAEsY,IAAI,IAAItY,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI6T,KAAK,CAAE,SAAQyE,IAAK,kBAAiB,CAAC;UAClD;UACA,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAACvE,QAAQ,CAACuE,IAAI,CAAC,EAAE;YACvC;UACF;UACA,MAAMM,SAAS,GAAGN,IAAI;UACtB,MAAMO,SAAS,GAAGd,IAAI,CAAC/X,KAAK,CAAC4Y,SAAS,CAAC;UACvC,MAAME,QAAQ,GAAG9Y,KAAK,CAAC4Y,SAAS,CAAC;UACjC,IAAI1C,MAAM,CAACC,gBAAgB,CAAC4C,GAAG,CAACT,IAAI,CAAC,EAAE;YACrCtY,KAAK,CAAC4Y,SAAS,CAAC,GAAII,GAAG,IAAK;cAC1B,IAAI,IAAI,CAACpC,QAAQ,CAAChX,KAAK,EAAE;gBACvB,OAAOqZ,OAAO,CAACC,OAAO,CAACL,SAAS,CAAC7F,IAAI,CAAChT,KAAK,EAAEgZ,GAAG,CAAC,CAAC,CAACG,IAAI,CAAEC,IAAI,IAAK;kBAChE,OAAON,QAAQ,CAAC9F,IAAI,CAAChT,KAAK,EAAEoZ,IAAI,CAAC;gBACnC,CAAC,CAAC;cACJ;cACA,MAAMpD,GAAG,GAAG6C,SAAS,CAAC7F,IAAI,CAAChT,KAAK,EAAEgZ,GAAG,CAAC;cACtC,OAAOF,QAAQ,CAAC9F,IAAI,CAAChT,KAAK,EAAEgW,GAAG,CAAC;YAClC,CAAC;UACH,CAAC,MAAM;YACLhW,KAAK,CAAC4Y,SAAS,CAAC,GAAG,CAAC,GAAGT,KAAK,KAAK;cAC/B,IAAInC,GAAG,GAAG6C,SAAS,CAACT,KAAK,CAACpY,KAAK,EAAEmY,KAAK,CAAC;cACvC,IAAInC,GAAG,KAAK,KAAK,EAAE;gBACjBA,GAAG,GAAG8C,QAAQ,CAACV,KAAK,CAACpY,KAAK,EAAEmY,KAAK,CAAC;cACpC;cACA,OAAOnC,GAAG;YACZ,CAAC;UACH;QACF;QACAgC,IAAI,CAAChY,KAAK,GAAGA,KAAK;MACpB;MACA,IAAI+X,IAAI,CAAC1X,UAAU,EAAE;QACnB,MAAMgZ,WAAW,GAAG,IAAI,CAACzC,QAAQ,CAACvW,UAAU;QAC5C,MAAMiZ,cAAc,GAAGvB,IAAI,CAAC1X,UAAU;QACtC2X,IAAI,CAAC3X,UAAU,GAAG,UAASgM,KAAK,EAAE;UAChC,IAAImL,MAAM,GAAG,EAAE;UACfA,MAAM,CAACzM,IAAI,CAACuO,cAAc,CAACtG,IAAI,CAAC,IAAI,EAAE3G,KAAK,CAAC,CAAC;UAC7C,IAAIgN,WAAW,EAAE;YACf7B,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC4B,WAAW,CAACrG,IAAI,CAAC,IAAI,EAAE3G,KAAK,CAAC,CAAC;UACvD;UACA,OAAOmL,MAAM;QACf,CAAC;MACH;MACA,IAAI,CAACZ,QAAQ,GAAG;QAAE,GAAG,IAAI,CAACA,QAAQ;QAAE,GAAGoB;MAAK,CAAC;IAC/C,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAnB,UAAUA,CAAChW,GAAG,EAAE;IACd,IAAI,CAAC+V,QAAQ,GAAG;MAAE,GAAG,IAAI,CAACA,QAAQ;MAAE,GAAG/V;IAAI,CAAC;IAC5C,OAAO,IAAI;EACb;EACAqM,KAAKA,CAACI,GAAG,EAAEF,QAAQ,EAAE;IACnB,OAAOkF,MAAM,CAACK,GAAG,CAACrF,GAAG,EAAEF,QAAQ,IAAI,IAAI,CAACwJ,QAAQ,CAAC;EACnD;EACAxC,MAAMA,CAAC7H,MAAM,EAAEa,QAAQ,EAAE;IACvB,OAAOsI,OAAO,CAACnB,KAAK,CAAChI,MAAM,EAAEa,QAAQ,IAAI,IAAI,CAACwJ,QAAQ,CAAC;EACzD;EACAE,aAAaA,CAACyC,SAAS,EAAE;IACvB,MAAMC,MAAM,GAAGA,CAAClM,GAAG,EAAEF,QAAQ,KAAK;MAChC,MAAMqM,OAAO,GAAG;QAAE,GAAGrM;MAAS,CAAC;MAC/B,MAAMvM,GAAG,GAAG;QAAE,GAAG,IAAI,CAAC+V,QAAQ;QAAE,GAAG6C;MAAQ,CAAC;MAC5C,MAAMC,UAAU,GAAG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC9Y,GAAG,CAACV,MAAM,EAAE,CAAC,CAACU,GAAG,CAACjB,KAAK,CAAC;MAC1D,IAAI,IAAI,CAACgX,QAAQ,CAAChX,KAAK,KAAK,IAAI,IAAI6Z,OAAO,CAAC7Z,KAAK,KAAK,KAAK,EAAE;QAC3D,OAAO8Z,UAAU,CAAC,IAAI7F,KAAK,CAAC,oIAAoI,CAAC,CAAC;MACpK;MACA,IAAI,OAAOvG,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,IAAI,EAAE;QAC9C,OAAOoM,UAAU,CAAC,IAAI7F,KAAK,CAAC,gDAAgD,CAAC,CAAC;MAChF;MACA,IAAI,OAAOvG,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAOoM,UAAU,CAAC,IAAI7F,KAAK,CAAC,uCAAuC,GAAGpB,MAAM,CAACmH,SAAS,CAACC,QAAQ,CAAC7G,IAAI,CAAC1F,GAAG,CAAC,GAAG,mBAAmB,CAAC,CAAC;MACnI;MACA,IAAIzM,GAAG,CAACb,KAAK,EAAE;QACba,GAAG,CAACb,KAAK,CAACiN,OAAO,GAAGpM,GAAG;QACvBA,GAAG,CAACb,KAAK,CAACgJ,KAAK,GAAGuQ,SAAS;MAC7B;MACA,MAAMvN,MAAM,GAAGnL,GAAG,CAACb,KAAK,GAAGa,GAAG,CAACb,KAAK,CAACyW,YAAY,CAAC,CAAC,GAAG8C,SAAS,GAAGjH,MAAM,CAACK,GAAG,GAAGL,MAAM,CAACM,SAAS;MAC/F,MAAMgD,OAAO,GAAG/U,GAAG,CAACb,KAAK,GAAGa,GAAG,CAACb,KAAK,CAAC0W,aAAa,CAAC,CAAC,GAAG6C,SAAS,GAAG7D,OAAO,CAACnB,KAAK,GAAGmB,OAAO,CAAClB,WAAW;MACvG,IAAI3T,GAAG,CAACjB,KAAK,EAAE;QACb,OAAOqZ,OAAO,CAACC,OAAO,CAACrY,GAAG,CAACb,KAAK,GAAGa,GAAG,CAACb,KAAK,CAACqW,UAAU,CAAC/I,GAAG,CAAC,GAAGA,GAAG,CAAC,CAAC6L,IAAI,CAAEW,IAAI,IAAK9N,MAAM,CAAC8N,IAAI,EAAEjZ,GAAG,CAAC,CAAC,CAACsY,IAAI,CAAE5M,MAAM,IAAK1L,GAAG,CAACb,KAAK,GAAGa,GAAG,CAACb,KAAK,CAACwW,gBAAgB,CAACjK,MAAM,CAAC,GAAGA,MAAM,CAAC,CAAC4M,IAAI,CAAE5M,MAAM,IAAK1L,GAAG,CAACR,UAAU,GAAG4Y,OAAO,CAACc,GAAG,CAAC,IAAI,CAAC1Z,UAAU,CAACkM,MAAM,EAAE1L,GAAG,CAACR,UAAU,CAAC,CAAC,CAAC8Y,IAAI,CAAC,MAAM5M,MAAM,CAAC,GAAGA,MAAM,CAAC,CAAC4M,IAAI,CAAE5M,MAAM,IAAKqJ,OAAO,CAACrJ,MAAM,EAAE1L,GAAG,CAAC,CAAC,CAACsY,IAAI,CAAE5P,KAAK,IAAK1I,GAAG,CAACb,KAAK,GAAGa,GAAG,CAACb,KAAK,CAACuW,WAAW,CAAChN,KAAK,CAAC,GAAGA,KAAK,CAAC,CAACyQ,KAAK,CAACN,UAAU,CAAC;MACha;MACA,IAAI;QACF,IAAI7Y,GAAG,CAACb,KAAK,EAAE;UACbsN,GAAG,GAAGzM,GAAG,CAACb,KAAK,CAACqW,UAAU,CAAC/I,GAAG,CAAC;QACjC;QACA,IAAIf,MAAM,GAAGP,MAAM,CAACsB,GAAG,EAAEzM,GAAG,CAAC;QAC7B,IAAIA,GAAG,CAACb,KAAK,EAAE;UACbuM,MAAM,GAAG1L,GAAG,CAACb,KAAK,CAACwW,gBAAgB,CAACjK,MAAM,CAAC;QAC7C;QACA,IAAI1L,GAAG,CAACR,UAAU,EAAE;UAClB,IAAI,CAACA,UAAU,CAACkM,MAAM,EAAE1L,GAAG,CAACR,UAAU,CAAC;QACzC;QACA,IAAIkJ,KAAK,GAAGqM,OAAO,CAACrJ,MAAM,EAAE1L,GAAG,CAAC;QAChC,IAAIA,GAAG,CAACb,KAAK,EAAE;UACbuJ,KAAK,GAAG1I,GAAG,CAACb,KAAK,CAACuW,WAAW,CAAChN,KAAK,CAAC;QACtC;QACA,OAAOA,KAAK;MACd,CAAC,CAAC,OAAO0Q,CAAC,EAAE;QACV,OAAOP,UAAU,CAACO,CAAC,CAAC;MACtB;IACF,CAAC;IACD,OAAOT,MAAM;EACf;EACAG,OAAOA,CAACxZ,MAAM,EAAEP,KAAK,EAAE;IACrB,OAAQqa,CAAC,IAAK;MACZA,CAAC,CAACC,OAAO,IAAI,6DAA6D;MAC1E,IAAI/Z,MAAM,EAAE;QACV,MAAMga,GAAG,GAAG,gCAAgC,GAAG7Q,OAAO,CAAC2Q,CAAC,CAACC,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,QAAQ;QACvF,IAAIta,KAAK,EAAE;UACT,OAAOqZ,OAAO,CAACC,OAAO,CAACiB,GAAG,CAAC;QAC7B;QACA,OAAOA,GAAG;MACZ;MACA,IAAIva,KAAK,EAAE;QACT,OAAOqZ,OAAO,CAACmB,MAAM,CAACH,CAAC,CAAC;MAC1B;MACA,MAAMA,CAAC;IACT,CAAC;EACH;AACF,CAAC;;AAED;AACA,IAAII,cAAc,GAAG,IAAI1D,MAAM,CAAC,CAAC;AACjC,SAAS2D,MAAMA,CAAChN,GAAG,EAAEzM,GAAG,EAAE;EACxB,OAAOwZ,cAAc,CAAC9F,KAAK,CAACjH,GAAG,EAAEzM,GAAG,CAAC;AACvC;AACAyZ,MAAM,CAACrN,OAAO,GAAGqN,MAAM,CAACzD,UAAU,GAAG,UAASzJ,QAAQ,EAAE;EACtDiN,cAAc,CAACxD,UAAU,CAACzJ,QAAQ,CAAC;EACnCkN,MAAM,CAAC1D,QAAQ,GAAGyD,cAAc,CAACzD,QAAQ;EACzCrW,cAAc,CAAC+Z,MAAM,CAAC1D,QAAQ,CAAC;EAC/B,OAAO0D,MAAM;AACf,CAAC;AACDA,MAAM,CAACC,WAAW,GAAG5a,YAAY;AACjC2a,MAAM,CAAC1D,QAAQ,GAAGtW,SAAS;AAC3Bga,MAAM,CAAChD,GAAG,GAAG,UAAS,GAAGD,IAAI,EAAE;EAC7BgD,cAAc,CAAC/C,GAAG,CAAC,GAAGD,IAAI,CAAC;EAC3BiD,MAAM,CAAC1D,QAAQ,GAAGyD,cAAc,CAACzD,QAAQ;EACzCrW,cAAc,CAAC+Z,MAAM,CAAC1D,QAAQ,CAAC;EAC/B,OAAO0D,MAAM;AACf,CAAC;AACDA,MAAM,CAACja,UAAU,GAAG,UAASkM,MAAM,EAAEgL,QAAQ,EAAE;EAC7C,OAAO8C,cAAc,CAACha,UAAU,CAACkM,MAAM,EAAEgL,QAAQ,CAAC;AACpD,CAAC;AACD+C,MAAM,CAAC9F,WAAW,GAAG6F,cAAc,CAAC7F,WAAW;AAC/C8F,MAAM,CAACvD,MAAM,GAAGrB,OAAO;AACvB4E,MAAM,CAAClG,MAAM,GAAGsB,OAAO,CAACnB,KAAK;AAC7B+F,MAAM,CAACtD,QAAQ,GAAG7C,SAAS;AAC3BmG,MAAM,CAACrD,YAAY,GAAGxB,aAAa;AACnC6E,MAAM,CAACpD,KAAK,GAAG5E,MAAM;AACrBgI,MAAM,CAACpN,KAAK,GAAGoF,MAAM,CAACK,GAAG;AACzB2H,MAAM,CAACnD,SAAS,GAAGnK,UAAU;AAC7BsN,MAAM,CAAClD,KAAK,GAAGlB,MAAM;AACrBoE,MAAM,CAAC/F,KAAK,GAAG+F,MAAM;AACrB,IAAIrN,OAAO,GAAGqN,MAAM,CAACrN,OAAO;AAC5B,IAAI4J,UAAU,GAAGyD,MAAM,CAACzD,UAAU;AAClC,IAAIS,GAAG,GAAGgD,MAAM,CAAChD,GAAG;AACpB,IAAIjX,UAAU,GAAGia,MAAM,CAACja,UAAU;AAClC,IAAImU,WAAW,GAAG8F,MAAM,CAAC9F,WAAW;AACpC,IAAID,KAAK,GAAG+F,MAAM;AAClB,IAAIlG,MAAM,GAAGsB,OAAO,CAACnB,KAAK;AAC1B,IAAIrH,KAAK,GAAGoF,MAAM,CAACK,GAAG;AACtB,SACEuD,MAAM,IAAIkB,KAAK,EACf9E,MAAM,IAAI4E,KAAK,EACfP,MAAM,EACNjB,OAAO,IAAIqB,MAAM,EACjB5C,SAAS,IAAI6C,QAAQ,EACrBvB,aAAa,IAAIwB,YAAY,EAC7BjK,UAAU,IAAImK,SAAS,EACvB7W,SAAS,IAAIsW,QAAQ,EACrBjX,YAAY,IAAI4a,WAAW,EAC3BrN,KAAK,EACLoN,MAAM,EACNrN,OAAO,EACPsH,KAAK,EACLC,WAAW,EACXJ,MAAM,EACNyC,UAAU,EACVS,GAAG,EACHjX,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}