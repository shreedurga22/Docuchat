{"ast":null,"code":"import { __decorate } from \"tslib\";\n// file-reader.component.ts\nimport { Component } from '@angular/core';\nexport let FileReaderComponent = class FileReaderComponent {\n  constructor(http) {\n    this.http = http;\n    this.selectedFile = null;\n    this.uploadedText = '';\n    this.answer = '';\n    this.question = '';\n    this.showModal = false;\n    this.apiUrl = 'http://localhost:5000';\n  }\n  // Handle file selection and upload\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    this.selectedFile = file;\n    this.uploadedText = '';\n    this.answer = '';\n    this.question = '';\n    this.showModal = false;\n    const formData = new FormData();\n    formData.append('file', file);\n    this.http.post(`${this.apiUrl}/upload`, formData).subscribe({\n      next: res => {\n        this.uploadedText = res.file_text || '';\n        this.showModal = true; // show extracted text\n      },\n\n      error: err => {\n        console.error('Upload error:', err);\n        alert('Failed to upload file.');\n      }\n    });\n  }\n  // Ask a question\n  askQuestion() {\n    if (!this.question || !this.uploadedText) {\n      alert('Please enter a question and upload a file first.');\n      return;\n    }\n    this.http.post(`${this.apiUrl}/ask`, {\n      question: this.question,\n      file_text: this.uploadedText\n    }).subscribe({\n      next: res => {\n        this.answer = res.answer || 'No answer returned.';\n      },\n      error: err => {\n        console.error('Backend error:', err);\n        this.answer = 'Could not get answer from backend.';\n      }\n    });\n  }\n  // Close modal\n  onModalClose() {\n    this.showModal = false;\n  }\n};\nFileReaderComponent = __decorate([Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})], FileReaderComponent);","map":{"version":3,"names":["Component","FileReaderComponent","constructor","http","selectedFile","uploadedText","answer","question","showModal","apiUrl","onFileSelected","event","file","target","files","formData","FormData","append","post","subscribe","next","res","file_text","error","err","console","alert","askQuestion","onModalClose","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts"],"sourcesContent":["// file-reader.component.ts\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})\nexport class FileReaderComponent {\n  selectedFile: File | null = null;\n  uploadedText: string = '';\n  answer: string = '';\n  question: string = '';\n  showModal: boolean = false;\n\n  private apiUrl = 'http://localhost:5000';\n\n  constructor(private http: HttpClient) {}\n\n  // Handle file selection and upload\n  onFileSelected(event: any) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    this.selectedFile = file;\n    this.uploadedText = '';\n    this.answer = '';\n    this.question = '';\n    this.showModal = false;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    this.http.post<{ file_text?: string }>(`${this.apiUrl}/upload`, formData).subscribe({\n      next: (res) => {\n        this.uploadedText = res.file_text || '';\n        this.showModal = true; // show extracted text\n      },\n      error: (err: any) => {\n        console.error('Upload error:', err);\n        alert('Failed to upload file.');\n      }\n    });\n  }\n\n  // Ask a question\n  askQuestion() {\n    if (!this.question || !this.uploadedText) {\n      alert('Please enter a question and upload a file first.');\n      return;\n    }\n\n    this.http.post<{ answer?: string }>(`${this.apiUrl}/ask`, {\n      question: this.question,\n      file_text: this.uploadedText\n    }).subscribe({\n      next: (res) => {\n        this.answer = res.answer || 'No answer returned.';\n      },\n      error: (err: any) => {\n        console.error('Backend error:', err);\n        this.answer = 'Could not get answer from backend.';\n      }\n    });\n  }\n\n  // Close modal\n  onModalClose() {\n    this.showModal = false;\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAS9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB,KAAAC,YAAY,GAAgB,IAAI;IAChC,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,SAAS,GAAY,KAAK;IAElB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvC;EACAC,cAAcA,CAACC,KAAU;IACvB,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACF,IAAI,EAAE;IAEX,IAAI,CAACR,YAAY,GAAGQ,IAAI;IACxB,IAAI,CAACP,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,SAAS,GAAG,KAAK;IAEtB,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;IAE7B,IAAI,CAACT,IAAI,CAACe,IAAI,CAAyB,GAAG,IAAI,CAACT,MAAM,SAAS,EAAEM,QAAQ,CAAC,CAACI,SAAS,CAAC;MAClFC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAAChB,YAAY,GAAGgB,GAAG,CAACC,SAAS,IAAI,EAAE;QACvC,IAAI,CAACd,SAAS,GAAG,IAAI,CAAC,CAAC;MACzB,CAAC;;MACDe,KAAK,EAAGC,GAAQ,IAAI;QAClBC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEC,GAAG,CAAC;QACnCE,KAAK,CAAC,wBAAwB,CAAC;MACjC;KACD,CAAC;EACJ;EAEA;EACAC,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACpB,QAAQ,IAAI,CAAC,IAAI,CAACF,YAAY,EAAE;MACxCqB,KAAK,CAAC,kDAAkD,CAAC;MACzD;;IAGF,IAAI,CAACvB,IAAI,CAACe,IAAI,CAAsB,GAAG,IAAI,CAACT,MAAM,MAAM,EAAE;MACxDF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBe,SAAS,EAAE,IAAI,CAACjB;KACjB,CAAC,CAACc,SAAS,CAAC;MACXC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACf,MAAM,GAAGe,GAAG,CAACf,MAAM,IAAI,qBAAqB;MACnD,CAAC;MACDiB,KAAK,EAAGC,GAAQ,IAAI;QAClBC,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEC,GAAG,CAAC;QACpC,IAAI,CAAClB,MAAM,GAAG,oCAAoC;MACpD;KACD,CAAC;EACJ;EAEA;EACAsB,YAAYA,CAAA;IACV,IAAI,CAACpB,SAAS,GAAG,KAAK;EACxB;CACD;AA9DYP,mBAAmB,GAAA4B,UAAA,EAL/B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACW/B,mBAAmB,CA8D/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}