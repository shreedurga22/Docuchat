{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let FileReaderComponent = class FileReaderComponent {\n  constructor(fileService) {\n    this.fileService = fileService;\n    this.selectedLanguage = 'English';\n    this.question = '';\n    this.answer = '';\n    this.languages = ['English', 'Hindi', 'Tamil', 'Malayalam', 'Telugu', 'French', 'Spanish', 'German'];\n  }\n  // When user selects a file\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n  }\n  // Upload the selected file\n  uploadFile() {\n    if (!this.selectedFile) {\n      alert(\"Please select a file first!\");\n      return;\n    }\n    this.fileService.uploadFile(this.selectedFile, this.selectedLanguage).subscribe({\n      next: res => {\n        alert(res.message);\n        this.answer = ''; // clear previous answer\n      },\n\n      error: err => {\n        console.error(err);\n        alert('File upload failed!');\n      }\n    });\n  }\n  // Ask question about uploaded file\n  askQuestion() {\n    if (!this.question) {\n      alert(\"Please type a question!\");\n      return;\n    }\n    this.fileService.askQuestion(this.question).subscribe({\n      next: res => {\n        this.answer = res.answer;\n      },\n      error: err => {\n        console.error(err);\n        alert('Failed to get answer!');\n      }\n    });\n  }\n};\nFileReaderComponent = __decorate([Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})], FileReaderComponent);","map":{"version":3,"names":["Component","FileReaderComponent","constructor","fileService","selectedLanguage","question","answer","languages","onFileSelected","event","selectedFile","target","files","uploadFile","alert","subscribe","next","res","message","error","err","console","askQuestion","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FileService } from '../file.service';\n\n@Component({\n  selector: 'app-file-reader',\n  templateUrl: './file-reader.component.html',\n  styleUrls: ['./file-reader.component.css']\n})\nexport class FileReaderComponent {\n\n  selectedFile!: File;\n  selectedLanguage: string = 'English';\n  question: string = '';\n  answer: string = '';\n  languages: string[] = ['English', 'Hindi', 'Tamil', 'Malayalam', 'Telugu', 'French', 'Spanish', 'German'];\n\n  constructor(private fileService: FileService) { }\n\n  // When user selects a file\n  onFileSelected(event: any) {\n    this.selectedFile = event.target.files[0];\n  }\n\n  // Upload the selected file\n  uploadFile() {\n    if (!this.selectedFile) {\n      alert(\"Please select a file first!\");\n      return;\n    }\n\n    this.fileService.uploadFile(this.selectedFile, this.selectedLanguage)\n      .subscribe({\n        next: (res) => {\n          alert(res.message);\n          this.answer = ''; // clear previous answer\n        },\n        error: (err) => {\n          console.error(err);\n          alert('File upload failed!');\n        }\n      });\n  }\n\n  // Ask question about uploaded file\n  askQuestion() {\n    if (!this.question) {\n      alert(\"Please type a question!\");\n      return;\n    }\n\n    this.fileService.askQuestion(this.question)\n      .subscribe({\n        next: (res) => {\n          this.answer = res.answer;\n        },\n        error: (err) => {\n          console.error(err);\n          alert('Failed to get answer!');\n        }\n      });\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAQ9BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAL/B,KAAAC,gBAAgB,GAAW,SAAS;IACpC,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,SAAS,GAAa,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC;EAEzD;EAEhD;EACAC,cAAcA,CAACC,KAAU;IACvB,IAAI,CAACC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3C;EAEA;EACAC,UAAUA,CAAA;IACR,IAAI,CAAC,IAAI,CAACH,YAAY,EAAE;MACtBI,KAAK,CAAC,6BAA6B,CAAC;MACpC;;IAGF,IAAI,CAACX,WAAW,CAACU,UAAU,CAAC,IAAI,CAACH,YAAY,EAAE,IAAI,CAACN,gBAAgB,CAAC,CAClEW,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZH,KAAK,CAACG,GAAG,CAACC,OAAO,CAAC;QAClB,IAAI,CAACZ,MAAM,GAAG,EAAE,CAAC,CAAC;MACpB,CAAC;;MACDa,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;QAClBN,KAAK,CAAC,qBAAqB,CAAC;MAC9B;KACD,CAAC;EACN;EAEA;EACAQ,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACjB,QAAQ,EAAE;MAClBS,KAAK,CAAC,yBAAyB,CAAC;MAChC;;IAGF,IAAI,CAACX,WAAW,CAACmB,WAAW,CAAC,IAAI,CAACjB,QAAQ,CAAC,CACxCU,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACX,MAAM,GAAGW,GAAG,CAACX,MAAM;MAC1B,CAAC;MACDa,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;QAClBN,KAAK,CAAC,uBAAuB,CAAC;MAChC;KACD,CAAC;EACN;CACD;AArDYb,mBAAmB,GAAAsB,UAAA,EAL/BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWzB,mBAAmB,CAqD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}