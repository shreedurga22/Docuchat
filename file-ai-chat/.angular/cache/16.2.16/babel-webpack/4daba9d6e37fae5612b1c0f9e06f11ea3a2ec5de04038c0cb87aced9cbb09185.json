{"ast":null,"code":"import { __decorate } from \"tslib\";\n// filereader.ts\nimport { Component } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// ✅ BackendService inside same file\nexport class BackendService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000'; // Flask backend\n  }\n  // Upload file\n  uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  // Ask a question\n  askQuestion(question, fileText) {\n    const payload = {\n      question: question,\n      file_text: fileText\n    };\n    return this.http.post(`${this.apiUrl}/ask`, payload);\n  }\n  // Test Ollama connection\n  testOllama() {\n    return this.http.get(`${this.apiUrl}/test-ollama`);\n  }\n  static {\n    this.ɵfac = function BackendService_Factory(t) {\n      return new (t || BackendService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BackendService,\n      factory: BackendService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n// ✅ Component\nexport let FilereaderComponent = class FilereaderComponent {\n  constructor(backend) {\n    this.backend = backend;\n    this.uploadedText = '';\n    this.answer = '';\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.backend.uploadFile(file).subscribe(res => {\n        console.log('Upload response:', res);\n        this.uploadedText = res.file_text; // ✅ save extracted text\n      });\n    }\n  }\n\n  ask(question) {\n    this.backend.askQuestion(question, this.uploadedText).subscribe(res => {\n      this.answer = res.answer;\n    });\n  }\n};\nFilereaderComponent = __decorate([Component({\n  selector: 'app-filereader',\n  templateUrl: './filereader.html'\n})], FilereaderComponent);","map":{"version":3,"names":["Component","BackendService","constructor","http","apiUrl","uploadFile","file","formData","FormData","append","post","askQuestion","question","fileText","payload","file_text","testOllama","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","FilereaderComponent","backend","uploadedText","answer","onFileSelected","event","target","files","subscribe","res","console","log","ask","__decorate","selector","templateUrl"],"sources":["D:\\L&T projects\\file-ai-chat\\src\\app\\file-reader\\file-reader.component.ts"],"sourcesContent":["// filereader.ts\nimport { Component, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n// ✅ BackendService inside same file\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n  private apiUrl = 'http://localhost:5000'; // Flask backend\n\n  constructor(private http: HttpClient) {}\n\n  // Upload file\n  uploadFile(file: File): Observable<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post<any>(`${this.apiUrl}/upload`, formData);\n  }\n\n  // Ask a question\n  askQuestion(question: string, fileText: string): Observable<any> {\n    const payload = {\n      question: question,\n      file_text: fileText\n    };\n    return this.http.post<any>(`${this.apiUrl}/ask`, payload);\n  }\n\n  // Test Ollama connection\n  testOllama(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/test-ollama`);\n  }\n}\n\n// ✅ Component\n@Component({\n  selector: 'app-filereader',\n  templateUrl: './filereader.html',\n})\nexport class FilereaderComponent {\n  uploadedText: string = '';\n  answer: string = '';\n\n  constructor(private backend: BackendService) {}\n\n  onFileSelected(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      this.backend.uploadFile(file).subscribe(res => {\n        console.log('Upload response:', res);\n        this.uploadedText = res.file_text; // ✅ save extracted text\n      });\n    }\n  }\n\n  ask(question: string) {\n    this.backend.askQuestion(question, this.uploadedText).subscribe(res => {\n      this.answer = res.answer;\n    });\n  }\n}\n\n\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAoB,eAAe;;;AAIrD;AAIA,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;EAEvC;EACAC,UAAUA,CAACC,IAAU;IACnB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACN,MAAM,SAAS,EAAEG,QAAQ,CAAC;EAC/D;EAEA;EACAI,WAAWA,CAACC,QAAgB,EAAEC,QAAgB;IAC5C,MAAMC,OAAO,GAAG;MACdF,QAAQ,EAAEA,QAAQ;MAClBG,SAAS,EAAEF;KACZ;IACD,OAAO,IAAI,CAACV,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACN,MAAM,MAAM,EAAEU,OAAO,CAAC;EAC3D;EAEA;EACAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAM,GAAG,IAAI,CAACb,MAAM,cAAc,CAAC;EACzD;;;uBAxBWH,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdpB,cAAc;MAAAqB,OAAA,EAAdrB,cAAc,CAAAsB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AA6BpB;AAKO,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BvB,YAAoBwB,OAAuB;IAAvB,KAAAA,OAAO,GAAPA,OAAO;IAH3B,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,MAAM,GAAW,EAAE;EAE2B;EAE9CC,cAAcA,CAACC,KAAU;IACvB,MAAMxB,IAAI,GAAGwB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI1B,IAAI,EAAE;MACR,IAAI,CAACoB,OAAO,CAACrB,UAAU,CAACC,IAAI,CAAC,CAAC2B,SAAS,CAACC,GAAG,IAAG;QAC5CC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;QACpC,IAAI,CAACP,YAAY,GAAGO,GAAG,CAACnB,SAAS,CAAC,CAAC;MACrC,CAAC,CAAC;;EAEN;;EAEAsB,GAAGA,CAACzB,QAAgB;IAClB,IAAI,CAACc,OAAO,CAACf,WAAW,CAACC,QAAQ,EAAE,IAAI,CAACe,YAAY,CAAC,CAACM,SAAS,CAACC,GAAG,IAAG;MACpE,IAAI,CAACN,MAAM,GAAGM,GAAG,CAACN,MAAM;IAC1B,CAAC,CAAC;EACJ;CACD;AArBYH,mBAAmB,GAAAa,UAAA,EAJ/BtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE;CACd,CAAC,C,EACWf,mBAAmB,CAqB/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}